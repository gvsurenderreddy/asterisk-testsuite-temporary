
testinfo:
    summary: 'Test playback start and manipulation using IDs with a tone resource using a tone zone'
    description: |
        * Originate a channel
        * Playback a tone
        * Pause it
        * Unpause it
        * Restart it
        * Delete the tone playback
        * Delete the channel
        * Validate all the events

properties:
    minversion: '12.3.0'
    dependencies:
        - python : autobahn.websocket
        - python : requests
        - python : twisted
        - python : starpy
        - asterisk : res_ari_channels
        - asterisk : app_echo
    tags:
        - ARI

test-modules:
    test-object:
        config-section: test-object-config
        typename: ari.AriOriginateTestObject
    modules:
        -   config-section: ari-config
            typename: ari.WebSocketEventModule

test-object-config:

ari-config:
    apps: testsuite
    events:
        -
            conditions:
                match:
                    type: 'ChannelStateChange'
            count: '>1'
        -
            conditions:
                match:
                    type: StasisStart
                    application: testsuite
                    channel:
                        id: 'testsuite-default-id$'
            count: 1
            requests:
                method: 'post'
                uri: 'channels/testsuite-default-id/play/MyPlaybackId'
                params:
                    # Use the tonezone for Germany
                    media: 'tone:record;tonezone=de'
        -
            conditions:
                match:
                    type: PlaybackStarted
                    application: testsuite
                    playback:
                        id: 'MyPlaybackId'
                        target_uri: 'channel:testsuite-default-id$'
                        media_uri: 'tone:record;tonezone=de'
            count: 2
            requests:
                -
                    instance: 1
                    delay: 1
                    method: 'post'
                    uri: 'playbacks/MyPlaybackId/control'
                    params:
                        operation: pause
                    # pause operation does not generate an event
                -
                    instance: 1
                    delay: 2
                    method: 'post'
                    uri: 'playbacks/MyPlaybackId/control'
                    params:
                        operation: unpause
                    # unpause operation triggers PlaybackStarted instance #2
                -
                    instance: 2
                    method: 'post'
                    uri: 'playbacks/MyPlaybackId/control'
                    params:
                        operation: restart
                -
                    instance: 2
                    delay: 2
                    method: 'delete'
                    uri: 'playbacks/MyPlaybackId'
        -
            conditions:
                match:
                    type: PlaybackFinished
                    application: testsuite
                    playback:
                        target_uri: 'channel:testsuite-default-id$'
            count: 1
            requests:
                # playback is already deleted
                method: 'delete'
                uri: 'channels/testsuite-default-id'
        -
            conditions:
                match:
                    type: ChannelHangupRequest
                    application: testsuite
                    channel:
                        id: 'testsuite-default-id$'
            count: 1

        -
            conditions:
                match:
                    type: StasisEnd
                    application: testsuite
                    channel:
                        id: 'testsuite-default-id$'
            count: 1
        -
            conditions:
                match:
                    type: ChannelDestroyed
                    application: testsuite
                    channel:
                        id: 'testsuite-default-id$'
            count: 1

