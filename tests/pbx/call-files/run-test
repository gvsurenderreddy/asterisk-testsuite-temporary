#!/usr/bin/env python
'''
Copyright (C) 2010, Digium, Inc.
Brett Bryant <bbryant@digium.com>

This program is free software, distributed under the terms of
the GNU General Public License Version 2.
'''

import sys
import os
import time
from optparse import OptionParser
from twisted.internet import reactor
from starpy import fastagi
from shutil import move, copy

sys.path.append("lib/python")
from asterisk.asterisk import Asterisk
from asterisk.version import AsteriskVersion

WORKINGDIR = "/tmp/asterisk-testsuite/call-files"
TESTDIR = "tests/pbx/call-files"

class CallFilesTest:
    def __init__(self, argv):
        self.passed = False
        self.results = [ False, False ]
        self.stopping = False

        # Test timeout in seconds
        self.timeout = 30

        # get version info
        parser = OptionParser()
        parser.add_option("-v", "--version", dest="ast_version",
                          help="Asterisk version string")
        (options, args) = parser.parse_args(argv)
        self.ast_version = AsteriskVersion(options.ast_version)

        self.asterisk1 = Asterisk(base=WORKINGDIR)
        self.asterisk1.install_config("%s/configs/extensions.conf" %
			              (TESTDIR))

        self.agi_factory1 = fastagi.FastAGIFactory(self.get_result1)
        self.agi_factory2 = fastagi.FastAGIFactory(self.get_result2)
        reactor.listenTCP(4601, self.agi_factory1,
                          self.timeout, '127.0.0.1')
        reactor.listenTCP(4602, self.agi_factory2,
                          self.timeout, '127.0.0.1')
        reactor.callWhenRunning(self.run)

    def get_result(self, testIndex, agi):
        print "Got AGI connection from dialplan: Success."
        self.results[testIndex-1] = True
        if not (False in self.results):
            self.passed = True
            reactor.callLater(2, self.end)
        return agi.finish()

    def get_result1(self, agi):
        self.get_result(1, agi)

    def get_result2(self, agi):
        self.get_result(2, agi)

    def start_asterisk(self):
        print "Starting Asterisk"
        self.asterisk1.start()

    def stop_asterisk(self):
        self.asterisk1.stop()

    def launch_test(self):
        for i in [ "", "2" ]:
            print "Moving the sample%s.call file to the spool dir..." % (i)

            copy("%s/sample%s.call" % (TESTDIR, i),
                 "%s/etc/sample%s.call" % (self.asterisk1.base, i))

            move("%s/etc/sample%s.call" % (self.asterisk1.base, i),
                 "%s%s/outgoing/" %
                 (self.asterisk1.base,
                  self.asterisk1.directories["astspooldir"]))

    def run(self):
        self.start_asterisk()

        reactor.callLater(5, self.launch_test)
        reactor.callLater(self.timeout, self.abort)

    def abort(self):
        if self.stopping: return
        print "Aborting..."
        self.end()

    def end(self):
        self.stopping = True

        if reactor.running:
            reactor.stop()

        self.stop_asterisk()

        print "Test 1 (Call File w/ Application) ... ",
        print "Passed" if self.results[0] else "Failed"
        print "Test 2 (Call File w/ Extension)   ... ",
        print "Passed" if self.results[1] else "Failed"


def main(argv=None):
    if argv is None:
        argv = sys.argv

    # Run call-files test
    call_files_test = CallFilesTest(argv)
    reactor.run()

    if call_files_test.passed != True:
        return 1
    return 0

if __name__ == "__main__":
    sys.exit(main() or 0)
