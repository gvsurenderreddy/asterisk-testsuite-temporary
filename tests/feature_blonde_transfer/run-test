#!/usr/bin/env python
'''
Copyright (C) 2010, Digium, Inc.
David Vossel <dvossel@digium.com>

This program is free software, distributed under the terms of
the GNU General Public License Version 2.
'''

import sys
import os
import math
from optparse import OptionParser
from twisted.application import service, internet
from twisted.internet import reactor
from starpy import fastagi

sys.path.append("lib/python")
from asterisk.asterisk import Asterisk
from asterisk.version import AsteriskVersion

class BlondeTransferTest:
    def __init__(self, argv):
        self.a_res = 0
        self.c_res = 0
        self.passed = False

        # Test timeout in seconds
        self.test_to = 45
        self.last_step = ""

        # get version info
        parser = OptionParser()
        parser.add_option("-v", "--version", dest="ast_version",
                          help="Asterisk version string")
        (options, args) = parser.parse_args(argv)
        self.ast_version = AsteriskVersion(options.ast_version)

        # FastAGI, listen for results from dialplan
        self.agi_a = fastagi.FastAGIFactory(self.get_result_a)
        self.agi_c = fastagi.FastAGIFactory(self.get_result_c)
        reactor.listenTCP(4573, self.agi_a, self.test_to, '127.0.0.1')
        reactor.listenTCP(4575, self.agi_c, self.test_to, '127.0.0.1')

        reactor.callWhenRunning(self.run)

        print self.ast_version
        self.asterisk1 = Asterisk(base=os.path.join(os.getcwd(), "/tmp/asterisk-testsuite/feature_blonde_transfer"))
        self.asterisk1.install_configs("tests/feature_blonde_transfer/blonde_configs")

        self.asterisk2 = Asterisk(base=os.path.join(os.getcwd(), "/tmp/asterisk-testsuite/feature_blonde_transfer"))
        self.asterisk2.install_configs("tests/feature_blonde_transfer/blonde_configs2")

        self.talkingaudio = os.path.join(os.getcwd(), "tests/feature_blonde_transfer/sounds/talking")

    # Close out the agi
    def handle_agi_result(self, agi):
        sequence = fastagi.InSequence()
        sequence.append(agi.finish)
        self.result_changed()
        return sequence()

    # This gets invoked by the dialplan when call leg A passes
    def get_result_a(self, agi):
        self.log_last_step("Blonde Call Leg A PASSED")
        self.a_res = 1
        return self.handle_agi_result(agi)

    # This gets invoked by the dialplan when call leg C passes
    def get_result_c(self, agi):
        self.log_last_step("Blonde Call Leg C PASSED")
        self.c_res = 1
        return self.handle_agi_result(agi)

    def read_result(self):
        self.log_last_step("Reading results")
        self.asterisk1.cli_exec("core show locks")   # get lock output in case of deadlock before tearing down.
        self.asterisk2.cli_exec("core show locks")   # get lock output in case of deadlock before tearing down.

        self.asterisk1.cli_exec("core show channels")# if channels are still up for some reason, we want to know that as well
        self.asterisk2.cli_exec("core show channels")# if channels are still up for some reason, we want to know that as well

        if self.ast_version < AsteriskVersion("1.6.1"):
            self.asterisk1.cli_exec("core show globals") # The global variables here hold failure conditions
            self.asterisk2.cli_exec("core show globals") # The global variables here hold failure conditions
        else:
            self.asterisk1.cli_exec("dialplan show globals") # The global variables here hold failure conditions
            self.asterisk2.cli_exec("dialplan show globals") # The global variables here hold failure conditions


        self.stop_asterisk()

        if (self.a_res and self.c_res):
            self.passed = True
            self.log_last_step("Blonde Transfer Test Passed...")
        else:
            if self.a_res == 0:
                self.log_last_step("Blonde Call Leg A failed.")
            if self.c_res == 0:
                self.log_last_step("Blonde Call Leg C failed.")
            self.log_last_step("Blonde Transfer Test Failed... view result of 'core show globals' in log for more detailed failure results.")

        if reactor.running:
            print "Stopping Reactor ..."
            reactor.stop()

    # This is an attended transfer test.  There are 3 call legs tested here, A, B, and C.
    # 1.  B calls A
    # 2.  B dials *2 to transfer A to C.
    # 3.  B dials C's extension
    # 4.  B hangs up before C picks up which connects A to C.
    # 5.  Audio and DTMF is passed and detected on each side of the call verifying the connection.
    # 6.  A and C report results to FastAGI and hangup.
    def launch_test(self):

        self.asterisk2.cli_exec("core set verbose 10")
        self.asterisk1.cli_exec("core set verbose 10")

        if self.ast_version < AsteriskVersion("1.6.1"):
            self.asterisk1.cli_exec("core set global TALK_AUDIO " + self.talkingaudio)
            self.asterisk2.cli_exec("core set global TALK_AUDIO " + self.talkingaudio)
        else:
            self.asterisk1.cli_exec("dialplan set global TALK_AUDIO " + self.talkingaudio)
            self.asterisk2.cli_exec("dialplan set global TALK_AUDIO " + self.talkingaudio)

        self.log_last_step("Originating call to begin test 1")
        if self.ast_version < AsteriskVersion("1.6.2"):
            self.asterisk2.cli_exec("originate IAX2/iax_b@127.0.0.1:4571/b_exten extension a_dial@transfertest")
        else:
            self.asterisk2.cli_exec("channel originate IAX2/iax_b@127.0.0.1:4571/b_exten extension a_dial@transfertest")

    def start_asterisk(self):
        self.log_last_step("Starting Asterisk")
        self.asterisk1.start()
        self.asterisk2.start()

    def stop_asterisk(self):
        self.asterisk1.stop()
        self.asterisk2.stop()

    def log_last_step(self, step):
        print step
        self.last_step = step

    # This is called every time a result comes in, once all results are in
    # we can quit early instead of waiting for the time out.
    def result_changed(self):
        if (self.a_res and self.c_res):
            self.log_last_step("All the results are in, now read them.")
            # This attempts to schedule a read result earlier than our default timeout.
            # If the default timeout one gets called first, that is fine.  Either way
            # this function shuts down the reactor so no other callbacks are processed.
            reactor.callLater(2, self.read_result)

    def run(self):
        self.start_asterisk()

        # call test1 extension now
        reactor.callLater(2, self.launch_test)

        # stop and read results after timeout
        reactor.callLater(self.test_to, self.read_result)

def main(argv=None):
    if argv is None:
        argv = sys.argv

     # Run Blonde Transfer Test
    blonde_transfer_test = BlondeTransferTest(argv)
    reactor.run()
    blonde_transfer_test.stop_asterisk()
    if blonde_transfer_test.passed != True:
        return 1
    return 0

if __name__ == "__main__":
    sys.exit(main() or 0)

