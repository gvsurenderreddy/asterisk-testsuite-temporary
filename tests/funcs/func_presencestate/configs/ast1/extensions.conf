[nominal1]
exten => 1,1,Answer
same => n,Set(pass=1)
same => n,Set(PRESENCE_STATE(CustomPresence:${CONTEXT})=away,down the hall,Quarterly financial meeting)
same => n,GotoIf($[${PRESENCE_STATE(CustomPresence:${CONTEXT},value)} = away]?:fail)
same => n,GotoIf($["${PRESENCE_STATE(CustomPresence:${CONTEXT},subtype)}" = "down the hall"]?:fail)
same => n,GotoIf($["${PRESENCE_STATE(CustomPresence:${CONTEXT},message)}" = "Quarterly financial meeting"]?:fail)
same => n,Hangup
same => n(fail),Set(pass=0)
same => n,Hangup
 
exten => h,1,UserEvent(Presence,Pass: ${pass})

;This test is invalid, at least for now. The reason is that setting presence is asynchronous.
;This means that after the second time we set presence state, we may actually attempt to read the
;presence state before it has been set internally. The result is that we get the old state read
;out. We don't have a reliable way to make sure that we wait for the presence state change to
;take effect before continuing in the dialplan.
;[nominal2]
;exten => 1,1,Answer
;same => n,Set(pass=1)
;same => n,Set(PRESENCE_STATE(CustomPresence:${CONTEXT})=away,down the hall,Quarterly financial meeting)
;same => n,GotoIf($[${PRESENCE_STATE(CustomPresence:${CONTEXT},value)} = away]?:fail)
;same => n,GotoIf($["${PRESENCE_STATE(CustomPresence:${CONTEXT},subtype)}" = "down the hall"]?:fail)
;same => n,GotoIf($["${PRESENCE_STATE(CustomPresence:${CONTEXT},message)}" = "Quarterly financial meeting"]?:fail)
;same => n,Set(PRESENCE_STATE(CustomPresence:${CONTEXT})=available)
;same => n,GotoIf($[${PRESENCE_STATE(CustomPresence:${CONTEXT},value)} = available]?:fail)
;same => n,GotoIf($["${PRESENCE_STATE(CustomPresence:${CONTEXT},subtype)}" = ""]?:fail)
;same => n,GotoIf($["${PRESENCE_STATE(CustomPresence:${CONTEXT},message)}" = ""]?:fail)
;same => n,Hangup
;same => n(fail),Set(pass=0)
;same => n,Hangup
; 
;exten => h,1,UserEvent(Presence,Pass: ${pass})

[base64read]
exten => 1,1,Answer
same => n,Set(pass=1)
same => n,Set(PRESENCE_STATE(CustomPresence:${CONTEXT})=away,down the hall,Quarterly financial meeting)
;Note the value is not base64-encoded even if 'e' is specified as an option.
same => n,GotoIf($[${PRESENCE_STATE(CustomPresence:${CONTEXT},value,e)} = away]?:fail)
same => n,GotoIf($["${PRESENCE_STATE(CustomPresence:${CONTEXT},subtype,e)}" = "${BASE64_ENCODE(down the hall)}"]?:fail)
same => n,GotoIf($["${PRESENCE_STATE(CustomPresence:${CONTEXT},message,e)}" = "${BASE64_ENCODE(Quarterly financial meeting)}"]?:fail)
same => n,Hangup
same => n(fail),Set(pass=0)
same => n,Hangup

exten => h,1,UserEvent(Presence,Pass: ${pass})

[base64write]
exten => 1,1,Answer
same => n,Set(pass=1)
same => n,Set(PRESENCE_STATE(CustomPresence:${CONTEXT})=away,${BASE64_ENCODE(down the hall)},${BASE64_ENCODE(Quarterly financial meeting)},e)
same => n,GotoIf($[${DB_EXISTS(CustomPresence/${CONTEXT})} = 1]?:fail)
same => n,Set(ARRAY(value,subtype,message)=${DB(CustomPresence/${CONTEXT})})
same => n,GotoIf($[${value} = away]?:fail)
same => n,GotoIf($["${subtype}" = "${BASE64_ENCODE(down the hall)}"]?:fail)
same => n,GotoIf($["${message}" = "${BASE64_ENCODE(Quarterly financial meeting)}"]?:fail)
;Even though the DB has the data base64-encoded, reading should decode...
same => n,GotoIf($[${PRESENCE_STATE(CustomPresence:${CONTEXT},value)} = away]?:fail)
same => n,GotoIf($["${PRESENCE_STATE(CustomPresence:${CONTEXT},subtype)}" = "down the hall"]?:fail)
same => n,GotoIf($["${PRESENCE_STATE(CustomPresence:${CONTEXT},message)}" = "Quarterly financial meeting"]?:fail)
same => n,Hangup
same => n(fail),Set(pass=0)
same => n,Hangup

exten => h,1,UserEvent(Presence,Pass: ${pass})

;The following are tests that are intended to give bad input to func_presencestate.
;The problem is that giving bad data to func_presencestate doesn't result in the call
;being hung up immediately as I expected. Instead, it results in no change happening
;to presence state. I also have no idea how I can check the return value of a dialplan function
;within the dialplan. As of now, I have no way of ensuring that these bad scenarios
;behave properly.
;[no_parameter]
;exten => 1,1,Answer
;same => n,Set(pass=1)
;same => n,Set(PRESENCE_STATE()=away,down the hall,Quarterly financial meeting)
;same => n,Set(pass=0)
; 
;exten => h,1,UserEvent(Presence,Pass: ${pass})
;
;[invalid_provider]
;exten => 1,1,Answer
;same => n,Set(pass=1)
;same => n,Set(PRESENCE_STATE(CostumePresence:${CONTEXT})=away,down the hall,Quarterly financial meeting)
;same => n,Set(pass=0)
; 
;exten => h,1,UserEvent(Presence,Pass: ${pass})
;
;[no_field]
;exten => 1,1,Answer
;same => n,Set(pass=1)
;same => n,Set(PRESENCE_STATE(CustomPresence:${CONTEXT})=away,down the hall,Quarterly financial meeting)
;same => n,Set(invalid=PRESENCE_STATE(CustomPresence:${CONTEXT}))
;same => n,Set(pass=0)
; 
;exten => h,1,UserEvent(Presence,Pass: ${pass})
;
;[invalid_field]
;exten => 1,1,Answer
;same => n,Set(pass=1)
;same => n,Set(PRESENCE_STATE(CustomPresence:${CONTEXT})=away,down the hall,Quarterly financial meeting)
;same => n,Set(invalid=PRESENCE_STATE(CustomPresence:${CONTEXT},mood))
;same => n,Set(pass=0)
; 
;exten => h,1,UserEvent(Presence,Pass: ${pass})
