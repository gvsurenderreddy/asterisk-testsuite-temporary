
[default]

exten => talk_detect_normal,1,NoOp()
 same => n,Set(TALK_DETECT(set)=)
 same => n,Return()

exten => talk_detect_short,1,NoOp()
 same => n,Set(TALK_DETECT(set)=1500,128)
 same => n,Return()

exten => talk_detect_micro,1,NoOp()
 same => n,Set(TALK_DETECT(set)=500)
 same => n,Return()

exten => talk_detect_remove,1,NoOp()
 same => n,Set(TALK_DETECT(remove)=)
 same => n,Return()

; The actual start of the test. This will loop through the
; various test iterations - when all are done, it will hangup
; the channel.
exten => test,1,NoOp()
 same => n,Set(TEST_COUNTER=1)
 same => n(start-test),NoOp()
 same => n,GotoIf($[${TEST_COUNTER} = 1]?test-one)
 same => n,GotoIf($[${TEST_COUNTER} = 2]?test-two)
 same => n,GotoIf($[${TEST_COUNTER} = 3]?test-three)
 same => n,GotoIf($[${TEST_COUNTER} = 4]?test-four)
 same => n,Hangup()

 ; Test setting TALK_DETECT with default settings, playing
 ; back utterances that should result in a single talking
 ; started/stopped, then removing TALK_DETECT
 same => n(test-one),NoOp()
 same => n,GoSub(default,talk_detect_normal,1)
 same => n,Stasis(testsuite,playback)
 same => n,GoSub(default,talk_detect_remove,1)
 same => n,Goto(next-test)

 ; Test setting TALK_DETECT with a shorter silence treshold
 ; and a smaller talking threshold. This should result in
 ; two pairs of events.
 same => n(test-two),NoOp()
 same => n,GoSub(default,talk_detect_short,1)
 same => n,Stasis(testsuite,playback)
 same => n,Goto(next-test)

 ; Test setting TALK_DETECT with modified settings from the
 ; previous iteration. This sets a tiny silence treshold.
 ; This should result in three pairs of events.
 same => n(test-three),NoOp()
 same => n,GoSub(default,talk_detect_micro,1)
 same => n,Stasis(testsuite,playback)
 same => n,Goto(next-test)

 ; Test removing TALK_DETECT and playing back the sounds.
 ; We should get no events from this - the attached AMI/ARI
 ; listeners will fail the test if we get additional events
 ; at this point.
 same => n(test-four),NoOp()
 same => n,GoSub(default,talk_detect_remove,1)
 same => n,Stasis(testsuite,playback)
 same => n,Goto(next-test)

 same => n(next-test),NoOp()
 same => n,Set(TEST_COUNTER=${INC(TEST_COUNTER)})
 same => n,Goto(start-test)

; The channels are originated into the ARI application. The
; ARI application itself will release one end of the Local channel
; into the test after subscribing to it; both ARI/AMI listen for
; the events.
exten => stasis_app,1,NoOp()
 same => n,Answer()
 same => n,Stasis(testsuite,subscribe)
 same => n,Hangup()
