[global]

CURRENT_JB_TYPE=none
CURRENT_RECORDED_FILE=none
CURRENT_MAX_SIZE=none
CURRENT_RESYNC_THRESHOLD=none
CURRENT_TARGET_EXTRA=none
CURRENT_TEST_TYPE=none

[sippeer]

exten => s,1,NoOp()
	same => n,GoSubIf($[${CURRENT_TEST_TYPE}=default_jb]?default_jb:)
	same => n,GoSubIf($[${CURRENT_TEST_TYPE}=all_params_jb]?all_params_jb:)
	same => n,Record(func_jitterbuffer_%d.wav,,,k)
	same => n,Verbose(1, ${RECORDED_FILE})
	same => n,Hangup()

; Subroutines used to set the Jitter Buffer on the outbound SIP channel
	same => n(default_jb),NoOp()
	same => n,Set(JITTERBUFFER(${CURRENT_JB_TYPE})=default))
	same => n,Return()

	same => n(all_params_jb),NoOp()
	same => n,Set(JITTERBUFFER(${CURRENT_JB_TYPE})=${CURRENT_MAX_SIZE},${CURRENT_RESYNC_THRESHOLD},${CURRENT_TARGET_EXTRA},${CURRENT_FRAME_TYPE})
	same => n,Return()

exten => h,1,NoOp()
	same => n,Set(GLOBAL(CURRENT_RECORDED_FILE)=${RECORDED_FILE})
	same => n,UserEvent(TestResult, result: pass)

[default]

; Local channel destinations to stream input to the receiving side
exten => stream_file,1,NoOp()
	same => n,Answer()
	same => n,Playback(${TALK_AUDIO})
	same => n,Wait(2)
	same => n,Hangup()

; Extensions that set up the jitter buffers and dial the SIP channel
exten => default,1,NoOp()
	same => n,Set(GLOBAL(CURRENT_TEST_TYPE)=default_jb)
	same => n,Set(GLOBAL(CURRENT_JB_TYPE)=${JB_TYPE})
	same => n,Dial(SIP/ast1)
	same => n,Hangup()

exten => all_param,1,NoOp()
	same => n,Set(GLOBAL(CURRENT_TEST_TYPE)=all_params_jb)
	same => n,Set(GLOBAL(CURRENT_MAX_SIZE)=${MAX_SIZE})
	same => n,Set(GLOBAL(CURRENT_RESYNC_THRESHOLD)=${RESYNC_THRESHOLD})
	same => n,Set(GLOBAL(CURRENT_TARGET_EXTRA)=${TARGET_EXTRA})
	same => n,Set(GLOBAL(CURRENT_JB_TYPE)=${JB_TYPE})
	same => n,Dial(SIP/ast1)
	same => n,Hangup()

; Talk detect verification for the recorded file
exten => detect_audio,1,Answer()
	same => n,Set(TALK_DETECTED=0) ; initialize TALK_DETECT var
	same => n,BackgroundDetect(${CURRENT_RECORDED_FILE},1,20,,20000)
	same => n,GoToIf($[${TALK_DETECTED}=0]?talkdetectfail:talkdetectpass)
	same => n(talkdetectfail),NoOp()
	same => n,UserEvent(TalkDetect, result: fail)
	same => n,Hangup()
	same => n(talkdetectpass),NoOp()
	same => n,UserEvent(TalkDetect, result: pass)
	same => n,Hangup()

exten => play_recording,1,Answer()
	same => n,PlayBack(${CURRENT_RECORDED_FILE})
