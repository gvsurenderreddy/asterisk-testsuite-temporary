#! /usr/bin/env python

import sys

from twisted.application import service, internet
from twisted.internet import reactor
from starpy import manager, fastagi, utilapplication, menu
import os, logging, pprint, time, sys

"""
This test module should serve as a template for new event monitoring tests. A
test class is created with sequential test methods named testX, where X starts
at 0. The purpose of each test method is to set the events to be monitored for
as well as optionally events to send which also need events monitored.

Please see the documentation in the client module for more information.
"""

workingdir ="manager/event-monitor"
testdir = "tests/%s" % workingdir

class Test():

    def test0(self, watcher):
        event1 = [{'response' : 'Success', 'ping' : 'Pong'}]
        watcher.add_event(event1)
        event_send = {'Action' : 'ping'}
        watcher.add_send_event(event_send)

def main():
    ast1 = Asterisk(base=workingdir)
    ast1.install_configs("%s/configs/ast1")

    logging.basicConfig()
    import client

    tester = Test()
    watcher = client.EventWatcher(ast1, tester, 5)

    #watcher.log.setLevel(logging.DEBUG)
    #manager.log.setLevel(logging.DEBUG)

    reactor.callWhenRunning(watcher.start)
    reactor.run()

    if watcher.passed:
        watcher.log.info("All tests were good!")
        return 0
    watcher.log.error("Test failure")
    return 1

if __name__ == "__main__":
    sys.exit(main() or 0)

# vim:sw=4:ts=4:expandtab:textwidth=79
