#!/usr/bin/env python
'''
Copyright (C) 2010, Digium, Inc.
David Vossel <dvossel@digium.com>

This program is free software, distributed under the terms of
the GNU General Public License Version 2.
'''

import sys
import os
import logging

from twisted.internet import reactor

sys.path.append("lib/python")
from asterisk.asterisk import Asterisk
from asterisk.version import AsteriskVersion
from asterisk.TestCase import TestCase

logger = logging.getLogger(__name__)

class PickupTest(TestCase):
    firstChannel = None
    secondChannel = None
    bridgeCount = 0

    def __init__(self):
        TestCase.__init__(self)
        self.create_asterisk()

    def hangup(self, ami):
        self.stop_reactor()

    def check_Bridge(self, ami, event):
        if self.bridgeCount != 0:
            return
        self.bridgeCount += 1

        channel1 = event.get('channel1')
        channel2 = event.get('channel2')

        if channel1 == self.firstChannel and channel2 == self.secondChannel:
            self.passed = True

        self.ami[0].hangup(self.firstChannel).addCallback(self.hangup)

    def check_Pickup(self, ami, event):
        self.secondChannel = event.get('channel')
        self.ami[0].registerEvent('Bridge', self.check_Bridge)

    def check_UserEvent(self, ami, event):
        if event.get("userevent") != "TestStatus":
            return

        status = event.get('status')
        if status != 'RINGING':
            return

        self.ami[0].registerEvent('Pickup', self.check_Pickup)
        self.ami[0].originate(
            channel = "Local/1002@pickuptest",
            application = "Echo",
        )

    def check_Dial(self, ami, event):
        dialstring = event.get('dialstring')
        if dialstring != 'iax_pickup_b/ringing_exten':
            return

        self.firstChannel = event.get('channel')

    def ami_connect(self, ami):
        TestCase.ami_connect(self, ami)
        self.ami[0].registerEvent("Dial", self.check_Dial)
        self.ami[0].registerEvent("UserEvent", self.check_UserEvent)
        self.ami[0].originate(
            channel = "IAX2/iax_pickup_b/1001",
            application = "Echo",
        )

    def run(self):
        TestCase.run(self)
        self.create_ami_factory()


def main():
    test = PickupTest()
    test.start_asterisk()
    reactor.run()
    test.stop_asterisk()
    if test.passed != True:
        return 1
    return 0

if __name__ == "__main__":
    sys.exit(main() or 0)

# vim:sw=4:ts=4:expandtab:textwidth=79
