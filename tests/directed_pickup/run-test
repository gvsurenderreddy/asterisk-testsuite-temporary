#!/usr/bin/env python
'''
Copyright (C) 2010, Digium, Inc.
David Vossel <dvossel@digium.com>

This program is free software, distributed under the terms of
the GNU General Public License Version 2.
'''

import sys
import os
import time
from optparse import OptionParser
from twisted.application import service, internet
from twisted.internet import reactor
from starpy import fastagi

sys.path.append("lib/python")
from asterisk.asterisk import Asterisk
from asterisk.version import AsteriskVersion

workingdir = "/tmp/asterisk-testsuite/directed_pickup"
testdir = "tests/directed_pickup"

NOT_RUN = 0
PASS = 1
FAIL = 2
SKIP = 4
class PickupTest:
    def __init__(self, argv):

        # Test timeout in seconds
        self.test_to = 15
        self.last_step = ""
        self.test1_res = NOT_RUN
        self.test2_res = NOT_RUN
        self.passed = FAIL

        # get version info
        parser = OptionParser()
        parser.add_option("-v", "--version", dest="ast_version",
                          help="Asterisk version string")
        (options, args) = parser.parse_args(argv)
        self.ast_version = AsteriskVersion(options.ast_version)

        # FastAGI, listen for results from dialplan
        # PASS on port 4573
        # FAIL on port 4574
        self.agi_pass = fastagi.FastAGIFactory(self.report_test_passed)
        self.agi_fail = fastagi.FastAGIFactory(self.report_test_failed)
        reactor.listenTCP(4573, self.agi_pass, self.test_to, '127.0.0.1')
        reactor.listenTCP(4574, self.agi_fail, self.test_to, '127.0.0.1')

        reactor.callWhenRunning(self.run)

        self.ast1 = Asterisk(base=workingdir)
        self.ast1.install_configs("%s/configs/ast1" % (testdir))

    def shut_down(self):
        self.log_last_step("Reading results")

        self.stop_reactor()

        if self.test1_res != FAIL and self.test2_res != FAIL:
            self.passed = True
            print "Tests Passed"
        else:
            if self.test1_res != PASS:
                print "Test 1 failed, Test 2 did not run"
            else:
                print "Test 1 Passed, Test 2 failed"
            print "Tests Failed"

    # Close out the agi
    def handle_agi_result(self, agi):
        sequence = fastagi.InSequence()
        sequence.append(agi.finish)
        return sequence()

    # set the result, schedule next step
    def handle_result(self, result):
        self.ast1.cli_exec("console hangup")

        if self.test1_res == NOT_RUN:
            self.log_last_step("Pickup Test 1 results came in.")
            self.test1_res = result
        elif self.test2_res == NOT_RUN:
            self.log_last_step("Pickup Test 2 results came in.")
            self.test2_res = result

        if self.test1_res == FAIL or self.test2_res == FAIL:
            # schedule early shutdown, a test failed
            self.shut_down()
        elif self.test1_res != NOT_RUN and self.test2_res != NOT_RUN:
            # schedule early shutdown, all tests ran
            self.shut_down()
        elif self.test2_res == NOT_RUN:
            # schedule test2 if test1 passed
            reactor.callLater(2, self.launch_test2)

    # This gets invoked by the dialplan when pickup test passes
    def report_test_passed(self, agi):
        self.handle_result(PASS)
        return self.handle_agi_result(agi)

    # This gets invoked by the dialplan when pickup test fails
    def report_test_failed(self, agi):
        self.handle_result(FAIL)
        return self.handle_agi_result(agi)

    def test1_pickup(self):
        self.log_last_step("Issuing the pickup")
        self.ast1.cli_exec("console dial 1002@pickuptest")

    def launch_test1(self):
        self.log_last_step("Starting Test 1")
        if self.ast_version < AsteriskVersion("1.6.2"):
            self.ast1.cli_exec("originate IAX2/iax_pickup_b@127.0.0.1/waiting_exten extension 1001@pickuptest")
        else:
            self.ast1.cli_exec("channel originate IAX2/iax_pickup_b@127.0.0.1/waiting_exten extension 1001@pickuptest")
        self.test1_pickup()

    def test2_pickup(self):
        self.log_last_step("Issuing the pickup")
        self.ast1.cli_exec("console dial 1003@pickuptest")

    def launch_test2(self):
        self.log_last_step("Starting Test 2")
        if self.ast_version < AsteriskVersion("1.8"):
            # this part requires version 1.8 or greater.
            self.test2 = SKIP
            self.shut_down()
        else:
            self.ast1.cli_exec("channel originate IAX2/iax_pickup_b@127.0.0.1/waiting_exten extension 1001@pickuptest")
            self.test2_pickup()

    def start_asterisk(self):
        self.log_last_step("Starting Asterisk")
        self.ast1.start()

    def stop_asterisk(self):
        self.ast1.stop()

    def log_last_step(self, step):
        print step
        self.last_step = step

    def stop_reactor(self):
        print "Stopping Reactor ..."
        if reactor.running:
            reactor.stop()

    def run(self):
        self.launch_test1()

        # stop reactor after timeout
        reactor.callLater(self.test_to, self.stop_reactor)


def main(argv=None):
    if argv is None:
        argv = sys.argv

    test = PickupTest(argv)
    test.start_asterisk()
    reactor.run()
    test.stop_asterisk()
    if test.passed != PASS:
        return 1
    return 0

if __name__ == "__main__":
    sys.exit(main() or 0)

