#!/usr/bin/env python
# vim: sw=3 et:
'''
Copyright (C) 2011, Digium, Inc.
Matt Jordan <mjordan@digium.com>

This program is free software, distributed under the terms of
the GNU General Public License Version 2.
'''

import sys
import os
import logging

from twisted.internet import reactor

sys.path.append("lib/python")

from asterisk.asterisk import Asterisk
from asterisk.voicemail import VoiceMailState, VoiceMailTest

logger = logging.getLogger(__name__)

"""
TestState that attempts a login with a mailbox / incorrect password
"""
class LoginWithMailbox(VoiceMailState):

    def __init__(self, controller, voiceMailTest):
        VoiceMailState.__init__(self, controller, voiceMailTest)

    def handleStateChange(self, ami, event):
        state = event['state']
        if state == 'PLAYBACK':
            message = event['message']
            if message == 'vm-login' or message == 'vm-incorrect-mailbox':
                self.voiceMailTest.sendDTMF("1234")
            elif message == 'vm-password':
                self.voiceMailTest.sendDTMF("5555")
                self.voiceMailTest.reset_timeout()
            elif message == 'vm-goodbye':
                self.voiceMailTest.hangup()
            else:
                self.handleDefaultState(event)
        elif state == 'AUTHENTICATED':
            logger.warn("We authenticated with an invalid mailbox - failing the test")
            self.voiceMailTest.passed = False
            self.voiceMailTest.stop_reactor()
        else:
            self.handleDefaultState(event)

    def getStateName(self):
        return "LOGIN WITH MAILBOX"

"""
TestState that attempts a login with an incorrect password only
"""
class LoginWithoutMailbox(VoiceMailState):

    def __init__(self, controller, voiceMailTest):
        VoiceMailState.__init__(self, controller, voiceMailTest)

    def handleStateChange(self, ami, event):
        state = event['state']
        if state == 'PLAYBACK':
            message = event['message']
            if message == 'vm-password':
                self.voiceMailTest.sendDTMF("5555")
                self.voiceMailTest.reset_timeout()
            elif message == 'vm-goodbye':
                self.voiceMailTest.hangup()
            else:
                self.handleDefaultState(event)
        elif state == 'AUTHENTICATED':
            logger.warn("We authenticated with an invalid mailbox - failing the test")
            self.voiceMailTest.passed = False
            self.voiceMailTest.stop_reactor()
        else:
            self.handleDefaultState(event)

    def getStateName(self):
        return "LOGIN WITHOUT MAILBOX"

class AuthenticateInvalidPassword(VoiceMailTest):

    def __init__(self):
        super(AuthenticateInvalidPassword, self).__init__()
        self.test_counter = 0
        self.create_asterisk(2)

    def ami_connect(self, ami):
        super(AuthenticateInvalidPassword, self).ami_connect(ami)

        """ Record which AMI instance we've received and attempt to set up the test controller """
        if (ami.id == 0):
            self.amiReceiver = ami
            ami.registerEvent('UserEvent', self.user_event)
        elif (ami.id == 1):
            self.amiSender = ami
            self.astSender = self.ast[self.amiSender.id]
            ami.registerEvent('Hangup', self.hangup_event_handler)
        self.createTestController()
        if (self.testStateController != None):
            startObject = LoginWithMailbox(self.testStateController, self)
            self.testStateController.changeState(startObject)

        if not (ami.id == 0):
            self.executeTest(ami)

    def hangup_event_handler(self, ami, event):
        if self.test_counter == 0:
            self.test_counter += 1
            logger.debug("Hangup event received; starting next test")
            self.executeTest(ami)
        else:
            logger.debug("Hangup event received; stopping reactor")
            self.passed = True
            self.stop_reactor()

    def executeTest(self, ami):
        if self.test_counter == 0:
            logger.debug("Originating call to sip/ast/9000")
            df = ami.originate("sip/ast1/9000", "voicemailCaller", "wait", 1)
            df.addErrback(self.handleOriginateFailure)
        else:
            self.senderChannel = "SIP/ast1-00000001"
            startObject = LoginWithoutMailbox(self.testStateController, self)
            self.testStateController.changeState(startObject)
            logger.debug("Originating call to sip/ast/9001")
            df = ami.originate("sip/ast1/9001", "voicemailCaller", "wait", 1)
            df.addErrback(self.handleOriginateFailure)

    def user_event(self, ami, event):
        if event['userevent'] != 'TestResult':
            return

        """
        Note that in this test, failure to see any UserEvents is a good thing - if we get to a
        UserEvent its because we authenticated something invalid
        """
        self.passed = False
        if event['result'] == 'pass':
            logger.error("Test Configuration Error - there should be no pass results returned")
        else:
            logger.warn("VMAuthenticate Failure:")
            logger.warn("result: %s" % (event['result'],))
            logger.warn("error: %s" % (event['status'],))

        self.stop_reactor()

    def run(self):
        super(AuthenticateInvalidPassword, self).run()
        self.passed = True
        self.create_ami_factory(2)


def main():

    test = AuthenticateInvalidPassword()

    test.start_asterisk()

    reactor.run()

    test.stop_asterisk()

    if not test.passed:
        return 1

    return 0

if __name__ == "__main__":
   sys.exit(main() or 0)
