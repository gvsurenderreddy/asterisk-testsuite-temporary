#!/usr/bin/env python
# vim: sw=3 et:
'''
Copyright (C) 2011, Digium, Inc.
Matt Jordan <mjordan@digium.com>

This program is free software, distributed under the terms of
the GNU General Public License Version 2.
'''

import sys
import os
import logging

from twisted.internet import reactor

sys.path.append("lib/python")

from asterisk.asterisk import Asterisk
from asterisk.TestCase import TestCase
from asterisk.voicemail import VoiceMailMailboxManagement
from asterisk.voicemail import VoiceMailState
from asterisk.voicemail import VoiceMailTest

logger = logging.getLogger(__name__)

class StartVoiceMailState(VoiceMailState):
"""
TestState that is the entry point for the VoiceMail application
"""

    def __init__(self, controller, voiceMailTest):
        VoiceMailState.__init__(self, controller, voiceMailTest)

    def handleStateChange(self, ami, event):
        state = event['state']
        if state == 'PLAYBACK':
            message = event['message']

            if message == 'vm-intro':
                self.sendDTMF()
                self.changeState(IntroVoiceMailState(self.controller, self.voiceMailTest))
            else:
                self.handleDefaultState(event)
        else:
            self.handleDefaultState(event)

    def getStateName(self):
        return "START"

class LeaveVoicemailContexts(VoiceMailTest):

    """
    The parent directory that this test resides in
    """
    testParentDir = "tests/apps/voicemail"

    def __init__(self):
        super(LeaveVoicemailContexts, self).__init__()

        self.reactor_timeout = 45
        self.testCounter = 0
        self.create_asterisk(2)
        self.expectedValues = {'attendant': False, 'operator': False, 'othercontext@1': False, 'othercontext@3': False, 'othercontext@operator': False}
        self.senderAmi = None

    def ami_connect(self, ami):
        super(LeaveVoicemailContexts, self).ami_connect(ami)

        self.audioFile = os.path.join(os.getcwd(), "%s/sounds/talking" % (self.testParentDir))

        # Record which AMI instance we've received and attempt to set up the test controller
        if (ami.id == 0):
            self.amiReceiver = ami
            ami.registerEvent('UserEvent', self.user_event)
        elif (ami.id == 1):
            self.amiSender = ami
            self.astSender = self.ast[self.amiSender.id]
        self.createTestController()
        if (self.testStateController != None):
            startObject = StartVoiceMailState(self.testStateController, self)
            self.testStateController.changeState(startObject)
            LeaveVoicemailContexts.executeTest(self)

    def executeTest(self):
        logger.info("Executing test [" + str(self.testCounter) + "]")
        if self.testCounter == 0:
            # Test exiting out before leaving voicemail and going to operator extension
            self.ast[self.senderAmi.id].cli_exec("dialplan set global DTMF_TO_SEND 0")
            df = self.senderAmi.originate("sip/ast1/1234", "sendvoicemail", "1234", 1)
            df.addErrback(self.handleOriginateFailure)
        elif self.testCounter == 1:
            # Test exiting out before leaving voicemail and going to asterisk (a) extension
            self.ast[self.senderAmi.id].cli_exec("dialplan set global DTMF_TO_SEND *")
            df = self.senderAmi.originate("sip/ast1/1234", "sendvoicemail", "1234", 1)
            df.addErrback(self.handleOriginateFailure)
        elif self.testCounter == 2:
            # Test exiting out before leaving voicemail and going to numeric 1 extension
            self.ast[self.senderAmi.id].cli_exec("dialplan set global DTMF_TO_SEND 1")
            df = self.senderAmi.originate("sip/ast1/1234", "sendvoicemail", "1234", 1)
            df.addErrback(self.handleOriginateFailure)
        elif self.testCounter == 3:
            # Test exiting out before leaving voicemail and going to numeric 3 extension
            self.ast[self.senderAmi.id].cli_exec("dialplan set global DTMF_TO_SEND 3")
            df = self.senderAmi.originate("sip/ast1/5678", "sendvoicemail", "5678", 1)
            df.addErrback(self.handleOriginateFailure)
        elif self.testCounter == 4:
            # Test exiting out before leaving voicemail and going to operator extension in a different context
            self.ast[self.senderAmi.id].cli_exec("dialplan set global DTMF_TO_SEND 0")
            df = self.senderAmi.originate("sip/ast1/9000", "sendvoicemail", "9000", 1)
            df.addErrback(self.handleOriginateFailure)
        else:
            logger.warn("Test iterated [" + str(self.testCounter) + "] - expected less than 5")

        self.testCounter +=1

    def user_event(self, ami, event):

        if event['userevent'] != 'TestResult':
            return

        if event['result'] != 'fail':
            logger.info("Received non-failure result " + event['result'])
            if event['result'] in self.expectedValues:
                self.expectedValues[event['result']] = True
                self.passed = True
            else:
                logger.warn("Unsupported or unexpected result: " + event['result'])
        else:
            logger.warn("VoiceMail did not successfully exit:")
            logger.warn("result: %s" % (event['result'],))
            logger.warn("error: %s" % (event['status'],))
            self.passed = False

        if self.testCounter == 5:
            self.stop_reactor()
        else:
            logger.debug("AMI ID is 1; testCounter is " + str(self.testCounter) + " - attempting to execute next test")
            self.executeTest()

    def run(self):
        super(LeaveVoicemailContexts, self).run()

        """ Create the AMI factories
        """
        self.create_ami_factory(2)


def main():

    test = LeaveVoicemailContexts()
    voicemailManager = VoiceMailMailboxManagement(test.ast[0])

    test.start_asterisk()

    reactor.run()

    test.stop_asterisk()

    """
    Verify that we received all expected results
    """
    for k, v in test.expectedValues.items():
        if not v:
            logger.warn("Failed to receive expected result: " + k)
            test.passed = False

    """
    Verify that no messages were left
    """
    if test.passed:
        formats = ["ulaw","wav","WAV"]
        if voicemailManager.checkVoicemailExists("default","9000",0,formats) \
        or voicemailManager.checkVoicemailExists("default","1234",0,formats) \
        or voicemailManager.checkVoicemailExists("default","5678",0,formats):
            logger.warn("Voicemails were left for default/1234, default/9000, or default/5678 - expected none")
            test.passed = False

    if not test.passed:
        return 1

    return 0

if __name__ == "__main__":
   sys.exit(main() or 0)
