#!/usr/bin/env python
# vim: sw=3 et:
'''
Copyright (C) 2011, Digium, Inc.
Matt Jordan <mjordan@digium.com>

This program is free software, distributed under the terms of
the GNU General Public License Version 2.
'''

import sys
import os
import datetime

from datetime import datetime
from twisted.internet import reactor

sys.path.append("lib/python")
sys.path.append("tests/apps/voicemail")

from asterisk.asterisk import Asterisk
from asterisk.TestCase import TestCase
from asterisk.voicemail import VoiceMailMailboxManagement

class LeaveVoicemailNominal(TestCase):

    """The parent directory that this test resides in
    """
    testParentDir = "tests/apps/voicemail"

    def __init__(self, argv):
        TestCase.__init__(self, argv)

        self.create_asterisk(2)


    def ami_connect(self, ami):
        print str(datetime.now()) + " Got AMI Connect for instance " + str(ami.id)
        TestCase.ami_connect(self, ami)

        self.audioFile = os.path.join(os.getcwd(), "%s/sounds/talking" % (self.testParentDir))

        ami.registerEvent('UserEvent', self.user_event)

        if not (ami.id == 0):
            self.ast[ami.id].cli_exec("dialplan set global TALK_AUDIO " + self.audioFile)

            extensions = [1234,1234,5678,5678,9000]
            for extension in extensions:
                print str(datetime.now()) + " Originating call to sip/ast1/" + str(extension)
                df = ami.originate("sip/ast1/" + str(extension), "sendvoicemail", str(extension), 1, None, "CallId-" + str(extension), None, None, None, {}, True )
                df.addErrback(self.handleOriginateFailure)


    def handleOriginateFailure(self, reason):
        print str(datetime.now()) + " error sending originate:"
        print reason.getTraceback()
        self.stop_reactor()

        return reason


    def user_event(self, ami, event):
        if event['userevent'] != 'TestResult':
            return

        if event['result'] == "pass":
            self.passed = True
            print str(datetime.now()) + " VoiceMail successfully exited"
        else:
            print str(datetime.now()) + " VoiceMail did not successfully exit:"
            print str(datetime.now()) + " result: %s" % (event['result'],)
            print str(datetime.now()) + " error: %s" % (event['error'],)

        self.stop_reactor()


    def run(self):
        TestCase.run(self)
        self.create_ami_factory(2)


def main(argv = sys.argv):

    test = LeaveVoicemailNominal(argv)
    voicemailManager = VoiceMailMailboxManagement(test.ast[0])

    test.start_asterisk()

    reactor.run()

    test.stop_asterisk()

    """
    Verify that all of the voicemails we expect to be created were created.  That would be:
    Two voicemails in default/1234
    Two voicemails in default/5678
    One voicemail in notdefault/1234
    All voicemails should have formats ulaw|wav49|wav
    """
    if test.passed:
        formats = ["ulaw","wav","WAV"]
        if not voicemailManager.checkVoicemailExists("default","1234",0,formats):
            print str(datetime.now()) + " Failed to find voicemail 0 for default/1234"
            test.passed = 0

        if not voicemailManager.checkVoicemailExists("default","1234",1,formats):
            print str(datetime.now()) + " Failed to find voicemail 1 for default/1234"
            test.passed = 0

        if not voicemailManager.checkVoicemailExists("default","5678",0,formats):
            print str(datetime.now()) + " Failed to find voicemail 0 for default/5678"
            test.passed = 0

        if not voicemailManager.checkVoicemailExists("default","5678",1,formats):
            print str(datetime.now()) + " Failed to find voicemail 0 for default/5678"
            test.passed = 0

        if not voicemailManager.checkVoicemailExists("notdefault","1234",0,formats):
            print str(datetime.now()) + " Failed to find voicemail 0 for notdefault/1234"
            test.passed = 0

    if not test.passed:
        return 1

    return 0

if __name__ == "__main__":
   sys.exit(main() or 0)
