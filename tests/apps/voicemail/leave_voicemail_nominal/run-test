#!/usr/bin/env python
# vim: sw=3 et:
'''
Copyright (C) 2011, Digium, Inc.
Matt Jordan <mjordan@digium.com>

This program is free software, distributed under the terms of
the GNU General Public License Version 2.
'''

import sys
import os
import logging

from twisted.internet import reactor

sys.path.append("lib/python")
sys.path.append("tests/apps/voicemail")

from asterisk.asterisk import Asterisk
from asterisk.TestCase import TestCase
from asterisk.voicemail import VoiceMailMailboxManagement

logger = logging.getLogger(__name__)

class LeaveVoicemailNominal(TestCase):

    """The parent directory that this test resides in
    """
    testParentDir = "tests/apps/voicemail"

    def __init__(self):
        super(LeaveVoicemailNominal, self).__init__()
        self.testResultsReceived = 0
        self.reactor_timeout = 120
        self.create_asterisk(2)

    def ami_connect(self, ami):
        super(LeaveVoicemailNominal, self).ami_connect(ami)

        self.audioFile = os.path.join(os.getcwd(), "%s/sounds/talking" % (self.testParentDir))

        ami.registerEvent('UserEvent', self.user_event)

        if not (ami.id == 0):
            self.ast[ami.id].cli_exec("dialplan set global TALK_AUDIO " + self.audioFile)

            extensions = [1234,1234,5678,5678,9000]
            for extension in extensions:
                logger.info("Originating call to sip/ast1/" + str(extension))
                df = ami.originate("sip/ast1/" + str(extension), "sendvoicemail", str(extension), 1, None, "CallId-" + str(extension), None, None, None, {}, True )
                df.addErrback(self.handleOriginateFailure)

    def user_event(self, ami, event):
        if event['userevent'] != 'TestResult':
            return

        self.testResultsReceived += 1
        super(LeaveVoicemailNominal, self).reset_timeout()
        if event['result'] == "pass":
            self.passed = True
            logger.info("VoiceMail successfully exited")
        else:
            logger.warn("VoiceMail did not successfully exit:")
            logger.warn("result: %s" % (event['result'],))
            logger.warn("error: %s" % (event['error'],))

        if self.testResultsReceived == 5:
            logger.info("All results received; stopping reactor")
            self.stop_reactor()

    def run(self):
        super(LeaveVoicemailNominal, self).run()
        self.create_ami_factory(2)


def main():
    test = LeaveVoicemailNominal()
    voicemailManager = VoiceMailMailboxManagement(test.ast[0])

    test.start_asterisk()

    reactor.run()

    test.stop_asterisk()

    """
    Verify that all of the voicemails we expect to be created were created.  That would be:
    Two voicemails in default/1234
    Two voicemails in default/5678
    One voicemail in notdefault/1234
    All voicemails should have formats ulaw|wav49|wav
    """
    if test.passed:
        formats = ["ulaw","wav","WAV"]
        if not voicemailManager.checkVoicemailExists("default","1234",0,formats):
            logger.warn("Failed to find voicemail 0 for default/1234")
            test.passed = 0

        if not voicemailManager.checkVoicemailExists("default","1234",1,formats):
            logger.warn("Failed to find voicemail 1 for default/1234")
            test.passed = 0

        if not voicemailManager.checkVoicemailExists("default","5678",0,formats):
            logger.warn("Failed to find voicemail 0 for default/5678")
            test.passed = 0

        if not voicemailManager.checkVoicemailExists("default","5678",1,formats):
            logger.warn("Failed to find voicemail 1 for default/5678")
            test.passed = 0

        if not voicemailManager.checkVoicemailExists("notdefault","1234",0,formats):
            logger.warn("Failed to find voicemail 0 for notdefault/1234")
            test.passed = 0

    if not test.passed:
        return 1

    return 0

if __name__ == "__main__":
   sys.exit(main() or 0)
