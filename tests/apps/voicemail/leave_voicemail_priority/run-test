#!/usr/bin/env python
# vim: sw=3 et:
'''
Copyright (C) 2011, Digium, Inc.
Matt Jordan <mjordan@digium.com>

This program is free software, distributed under the terms of
the GNU General Public License Version 2.
'''

import sys
import os
import logging

from twisted.internet import reactor

sys.path.append("lib/python")

from asterisk.asterisk import Asterisk
from asterisk.TestCase import TestCase
from asterisk.voicemail import VoiceMailMailboxManagement

logger = logging.getLogger(__name__)

class LeaveVoicemailPriority(TestCase):

    def __init__(self):
        super(LeaveVoicemailPriority, self).__init__()
        self.testParentDir = "tests/apps/voicemail"
        self.testCounter = 0
        self.reactor_timeout = 60
        self.create_asterisk(2)

    def ami_connect(self, ami):
        super(LeaveVoicemailPriority, self).ami_connect(ami)

        self.audioFile = os.path.join(os.getcwd(), "%s/sounds/talking" % (self.testParentDir))

        if (ami.id == 0):
            ami.registerEvent('UserEvent', self.user_event)

        if (ami.id != 0):
            self.executed[ami.id] = True
            self.ast[ami.id].cli_exec("dialplan set global TALK_AUDIO " + self.audioFile)

            df1 = ami.originate("sip/ast1/1234", "sendvoicemail", "1234", 1)
            df1.addErrback(self.handleOriginateFailure)

            df2 = ami.originate("sip/ast1/5678", "sendvoicemail", "1234", 1)
            df2.addErrback(self.handleOriginateFailure)

    def user_event(self, ami, event):

        if event['userevent'] != 'TestResult':
            return

        self.testCounter += 1

        if event["result"] != "fail":
            logger.info("Received non-failure result " + event['result'])
            if self.testCounter == 2:
                logger.info("Received all expected results; stopping Reactor")
                self.passed = True
                self.stop_reactor()
        else:
            self.passed = False
            logger.warn("VoiceMail did not successfully exit:")
            logger.warn("result: %s" % (event['result'],))
            logger.warn("expected: %s" % (expected))
            logger.warn("error: %s" % (event['error'],))
            self.stop_reactor()

    def run(self):
        super(LeaveVoicemailPriority, self).run()

        self.create_ami_factory(2)

def main():

    test = LeaveVoicemailPriority()
    voicemailManager = VoiceMailMailboxManagement(test.ast[0])

    test.start_asterisk()

    reactor.run()

    test.stop_asterisk()

    logger.info("Verifying voicemails (test result: [" + str(test.passed) + "])")

    """
    Verify that messages were left in the appropriate places
    """
    if test.passed:
        formats = ["ulaw","wav","WAV"]
        if not voicemailManager.checkVoicemailExists("default","1234",0,formats,"Urgent"):
            logger.warn("No Urgent voicemail left for default/1234")
            test.passed = False
        if not voicemailManager.checkVoicemailExists("default","5678",0,formats):
            logger.warn("No voicemail left for default/5678")
            test.passed = False
        else:
            if not voicemailManager.checkVoicemailProperty("default","5678",0,"flag","PRIORITY"):
                logger.warn("Voicemail was not left with flag [PRIORITY]")
                test.passed = False

    if not test.passed:
        return 1

    return 0

if __name__ == "__main__":
   sys.exit(main() or 0)
