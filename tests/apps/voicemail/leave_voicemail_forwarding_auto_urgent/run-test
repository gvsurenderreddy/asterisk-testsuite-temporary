#!/usr/bin/env python
# vim: sw=3 et:
'''
Copyright (C) 2011, Digium, Inc.
Matt Jordan <mjordan@digium.com>

This program is free software, distributed under the terms of
the GNU General Public License Version 2.
'''

import sys
import os
import logging

from twisted.internet import reactor

sys.path.append("lib/python")
sys.path.append("tests/apps/voicemail")

from asterisk.asterisk import Asterisk
from asterisk.TestCase import TestCase
from asterisk.voicemail import VoiceMailMailboxManagement

logger = logging.getLogger(__name__)

class LeaveVoicemailForwardingAutoUrgent(TestCase):

    """
    The parent directory that this test resides in
    """
    testParentDir = "tests/apps/voicemail"

    def __init__(self):
        super(LeaveVoicemailForwardingAutoUrgent, self).__init__()

        self.create_asterisk(2)


    def ami_connect(self, ami):
        super(LeaveVoicemailForwardingAutoUrgent, self).ami_connect(ami)

        self.audioFile = os.path.join(os.getcwd(), "%s/sounds/talking" % (self.testParentDir))

        ami.registerEvent('UserEvent', self.user_event)

        if (ami.id != 0):
            self.ast[ami.id].cli_exec("dialplan set global TALK_AUDIO " + self.audioFile)

            df1 = ami.originate("sip/ast1/1234", "sendvoicemail", "1234", 1)
            df1.addErrback(self.handleOriginateFailure)

    def user_event(self, ami, event):

        if event['userevent'] != 'TestResult':
            return

        if event["result"] != "fail":
            logger.info("Received non-failure result " + event['result'])
            self.passed = True
        else:
            self.passed = False
            logger.warn("VoiceMail did not successfully exit:")
            logger.warn("result: %s" % (event['result'],))
            logger.warn("expected: %s" % (expected))
            logger.warn("error: %s" % (event['error'],))

        logger.info("Received all expected results; stopping Reactor")
        self.stop_reactor()

    def run(self):
        super(LeaveVoicemailForwardingAutoUrgent, self).run()

        """ Create the AMI factories
        """
        self.create_ami_factory(2)

def main():

    test = LeaveVoicemailForwardingAutoUrgent()
    voicemailManager = VoiceMailMailboxManagement(test.ast[0])

    test.start_asterisk()

    reactor.run()

    test.stop_asterisk()

    logger.info("Verifying voicemails (test result: [" + str(test.passed) + "])")

    """
    Verify that messages were left in the appropriate places
    """
    if test.passed:
        formats = ["ulaw","wav","WAV"]
        if not voicemailManager.checkVoicemailExists("default","1234",0,formats, "Urgent"):
            logger.warn("No voicemail left for default/1234")
            test.passed = 0
        if not voicemailManager.checkVoicemailExists("default","9000",0,formats, "Urgent"):
            logger.warn("No voicemail left for default/9000")
            test.passed = 0
        if not voicemailManager.checkVoicemailExists("default","9001",0,formats, "Urgent"):
            logger.warn("No voicemail left for default/9001")
            test.passed = 0
        if not voicemailManager.checkVoicemailExists("notdefault","9002",0,formats, "Urgent"):
            logger.warn("No voicemail left for notdefault/9002")
            test.passed = 0

    if not test.passed:
        return 1

    return 0

if __name__ == "__main__":
   sys.exit(main() or 0)
