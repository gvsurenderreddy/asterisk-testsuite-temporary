#!/usr/bin/env python
# vim: sw=3 et:
'''
Copyright (C) 2011, Digium, Inc.
Matt Jordan <mjordan@digium.com>

This program is free software, distributed under the terms of
the GNU General Public License Version 2.
'''

import sys
import os
import logging

from twisted.internet import reactor

sys.path.append("lib/python")
sys.path.append("tests/apps/voicemail")

from asterisk.asterisk import Asterisk
from asterisk.TestCase import TestCase
from asterisk.voicemail import VoiceMailMailboxManagement
from asterisk.voicemail import VoiceMailState
from asterisk.voicemail import VoiceMailTest

logger = logging.getLogger(__name__)

"""
TestState that is the entry point for the VoiceMail application
"""
class StartVoiceMailState(VoiceMailState):

    def __init__(self, controller, voiceMailTest):
        VoiceMailState.__init__(self, controller, voiceMailTest)

    def handleStateChange(self, ami, event):
        state = event['state']
        if state == 'PLAYBACK':
            message = event.get('message')

            if message == 'vm-intro':
                self.changeState(IntroVoiceMailState(self.controller, self.voiceMailTest))
            else:
                self.handleDefaultState(event)
        else:
            self.handleDefaultState(event)

    def getStateName(self):
        return "START"

"""
TestState that occurs when the Intro message is read, and will start the audio playback at the beep.
After this the test states transition to a pending until switched back to Start by the reception
of a UserEvent.
"""
class IntroVoiceMailState(VoiceMailState):

    def __init__(self, controller, voiceMailTest):
        VoiceMailState.__init__(self, controller, voiceMailTest)

    def handleStateChange(self, ami, event):
        state = event['state']
        if state == 'PLAYBACK':
            message = event.get('message')

            if message == 'beep':
                """ A beep indicates we need to stream some sound file over - use the same sound file for everything """
                audioFile = os.path.join(os.getcwd(), "%s/sounds/talking" % (self.voiceMailTest.testParentDir))
                self.voiceMailTest.sendSoundFileWithDTMF(audioFile, "#")
                self.changeState(PendingVoiceMailState(self.controller, self.voiceMailTest))
            else:
                self.handleDefaultState(event)
        else:
            self.handleDefaultState(event)
    def getStateName(self):
        return "INTRO"

"""
TestState that occurs between leaving voicemails
"""
class PendingVoiceMailState(VoiceMailState):

    def __init__(self, controller, voiceMailTest):
        VoiceMailState.__init__(self, controller, voiceMailTest)
        """ Reset the reactor timeout """
        self.voiceMailTest.reset_timeout()

    def handleStateChange(self, ami, event):
        pass

    def getStateName(self):
        return "PENDING"

class LeaveVoicemailForwardingAutoUrgent(VoiceMailTest):

    """
    The parent directory that this test resides in
    """
    testParentDir = "tests/apps/voicemail"

    def __init__(self):
        super(LeaveVoicemailForwardingAutoUrgent, self).__init__()
        self.testParentDir = "tests/apps/voicemail"
        self.testResultsReceived = 0
        self.reactor_timeout = 45
        self.test_counter = 0
        self.extensions = [1234]
        self.create_asterisk(2)


    def ami_connect(self, ami):
        super(LeaveVoicemailForwardingAutoUrgent, self).ami_connect(ami)
        self.audioFile = os.path.join(os.getcwd(), "%s/sounds/talking" % (self.testParentDir))

        """ Record which AMI instance we've received and attempt to set up the test controller """
        if (ami.id == 0):
            ami.registerEvent('UserEvent', self.user_event)
            self.amiReceiver = ami
        elif (ami.id == 1):
            self.amiSender = ami
            self.astSender = self.ast[self.amiSender.id]
        self.createTestController()
        if (self.testStateController != None):
            startObject = StartVoiceMailState(self.testStateController, self)
            self.testStateController.changeState(startObject)

        if not (ami.id == 0):
            self.originate_call()

    def originate_call(self):
        extension = self.extensions[self.test_counter]
        logger.info("Originating call to sip/ast1/" + str(extension))
        df = self.amiSender.originate("sip/ast1/" + str(extension), "voicemailCaller", "wait", 1, None, "CallId-" + str(extension), None, None, None, {}, True )
        df.addErrback(self.handleOriginateFailure)

    def user_event(self, ami, event):

        if event['userevent'] != 'TestResult':
            return

        if event["result"] != "fail":
            logger.info("Received non-failure result " + event['result'])
            self.passed = True
        else:
            self.passed = False
            logger.warn("VoiceMail did not successfully exit:")
            logger.warn("result: %s" % (event['result'],))
            logger.warn("expected: %s" % (expected))
            logger.warn("error: %s" % (event['error'],))

        logger.info("Received all expected results; stopping Reactor")
        self.stop_reactor()

    def run(self):
        super(LeaveVoicemailForwardingAutoUrgent, self).run()
        self.create_ami_factory(2)

def main():

    test = LeaveVoicemailForwardingAutoUrgent()
    voicemailManager = VoiceMailMailboxManagement(test.ast[0])

    test.start_asterisk()
    reactor.run()
    test.stop_asterisk()

    logger.info("Verifying voicemails (test result: [" + str(test.passed) + "])")

    """
    Verify that messages were left in the appropriate places
    """
    if test.passed:
        formats = ["ulaw","wav","WAV"]
        if not voicemailManager.checkVoicemailExists("default","1234",0,formats, "Urgent"):
            logger.warn("No voicemail left for default/1234")
            test.passed = 0
        if not voicemailManager.checkVoicemailExists("default","9000",0,formats, "Urgent"):
            logger.warn("No voicemail left for default/9000")
            test.passed = 0
        if not voicemailManager.checkVoicemailExists("default","9001",0,formats, "Urgent"):
            logger.warn("No voicemail left for default/9001")
            test.passed = 0
        if not voicemailManager.checkVoicemailExists("notdefault","9002",0,formats, "Urgent"):
            logger.warn("No voicemail left for notdefault/9002")
            test.passed = 0

    if not test.passed:
        return 1

    return 0

if __name__ == "__main__":
   sys.exit(main() or 0)
