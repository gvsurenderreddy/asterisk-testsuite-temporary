#!/usr/bin/env python

import fileinput
import sys
import os
import time
import shutil
from twisted.internet import reactor, defer
from starpy import fastagi

sys.path.append("lib/python")
from asterisk.asterisk import Asterisk
from asterisk.TestCase import TestCase
from asterisk.cdr import AsteriskCSVCDR, AsteriskCSVCDRLine
from starpy import manager

# Quick little function for doing search and replace in a file used below.
def file_replace_string(file, search, replace):
    for line in fileinput.input(file, inplace=1):
        if search in line:
            line = line.replace(search,replace)
        sys.stdout.write(line)

"""
This test case creates two Asterisk instances with TLS enabled.
ast[0] calls ast[1] using a TLS encrypted SIP peer and ast[1] waits a little while then plays DTMF of '5'
back. If all goes well, this will create a manager event on ast[0] indicating it received a DTMF tone of '5'.
"""
class SIPTLSCallTest(TestCase):

    # Preps test objects and configuration additions as well as copies TLS keys to test folder.
    def __init__(self):
        TestCase.__init__(self)

        print "Creating Asterisk instances ..."
        self.create_asterisk(2)

        workingdir = "channels/SIP/sip_tls_call"
        testdir = "tests/%s" % workingdir

        # initialize test variables
        self.passed = False
        self.tone1 = False
        self.tone2 = False

        # Additional setup for config files and keys
        print "Building test resources ..."
        shutil.copy('%s/configs/helper1' % (testdir), '%s/configs/ast1/sip_helper.inc' % (testdir))
        shutil.copy('%s/configs/helper2' % (testdir), '%s/configs/ast2/sip_helper.inc' % (testdir))
        file_replace_string('%s/configs/ast1/sip_helper.inc' % (testdir), '<<path>>', '%s' % (workingdir))
        file_replace_string('%s/configs/ast2/sip_helper.inc' % (testdir), '<<path>>', '%s' % (workingdir))

        if not os.path.exists('%s/' % workingdir):
            os.makedirs('%s' % workingdir);
        if os.path.exists('%s/keys' % (workingdir)):
            shutil.rmtree('%s/keys' % (workingdir))
        shutil.copytree('%s/configs/keys' % (testdir), '%s/keys' % (workingdir))
        # End of additional setup for config files and keys

    # Once the AMI Factory connects to the AMI, this function fires.
    def ami_connect(self, ami):
        TestCase.ami_connect(self, ami)

        print "AMI %d - connected, registering DTMF event..." % (ami.id + 1)

        # This will make the manager listen for DTMF and callback ami_test when it sees some.
        ami.registerEvent('DTMF', self.ami_test)

        # We only want to originate the call on the ast[0]'s manager.
        if ami.id == 0:
            print "AMI - originating call from SIP/testast1 to extension 1000 using extension 1000 at priority 1"
            ami.originate(channel = "SIP/testast1/1000", context = "default", exten = "1000", priority = "1")

    # This test is initiated whenever a DTMF event occurs.
    def ami_test(self, ami, event):

        print "Received DTMF event from AMI %d..." % (ami.id + 1)
        print "Value of DTMF[digit] = %s" % (event['digit'])
        if event['digit'] == "5" and ami.id == 0:
            self.tone1 = True
            print "It's a match for ast[0] receiving DTMF from ast[1]"
        elif event['digit'] == "6" and ami.id == 1:
            self.tone2 = True
            print "It's a match for ast[1] receiving DTMF from ast[0]"

        if self.tone1 and self.tone2:
            print "Both tones have been matched at least once.  Test PASSED."
            self.passed = True
            self.stop_reactor()

    # Sets up reactor and AMI connection
    def run(self):
        TestCase.run(self)
        # will link up to ami_connect() once the connection is established
        self.create_ami_factory(count = 2)


def main():
    test = SIPTLSCallTest()
    test.start_asterisk()
    reactor.run()

    test.stop_asterisk()

    if test.passed:
        return 0
    return 1

if __name__ == "__main__":
    sys.exit(main() or 0)


# vim:sw=4:ts=4:expandtab:textwidth=79
