#!/usr/bin/env python
'''
Copyright (C) 2010, Digium, Inc.
David Vossel <dvossel@digium.com>

This program is free software, distributed under the terms of
the GNU General Public License Version 2.
'''

import sys
import os
import math
from optparse import OptionParser
from twisted.internet import reactor

sys.path.append("lib/python")
from asterisk.asterisk import Asterisk
from asterisk.version import AsteriskVersion

class MixMonitorTest:
    def __init__(self, argv):
        self.passed = False
        self.last_step = ""
        # if audiohook inherit does not work, file will be much smaller than 150000 bytes
        self.expectedfilesize = 150000
        self.audiofile1size = -1

        # get version info
        parser = OptionParser()
        parser.add_option("-v", "--version", dest="ast_version",
                          help="Asterisk version string")
        (options, args) = parser.parse_args(argv)
        self.ast_version = AsteriskVersion(options.ast_version)

        reactor.callWhenRunning(self.run)

        print self.ast_version
        self.asterisk = Asterisk(base="/tmp/asterisk-testsuite/mixmonitor_audiohook_inherit")
        self.audiofile1 = os.path.join(os.getcwd(), "tests/mixmonitor_audiohook_inherit/testaudio1")
        self.asterisk.install_configs("tests/mixmonitor_audiohook_inherit/configs")
        self.talkingaudio = os.path.join(os.getcwd(), "tests/mixmonitor_audiohook_inherit/sounds/talking")

    def read_result(self):
        self.log_last_step("Reading result file from MixMonitor")
        if os.path.exists(self.audiofile1 + ".raw"):
            self.audiofile1size = os.path.getsize(self.audiofile1 + ".raw")

        self.stop_asterisk()
        print "Stopping Reactor ..."
        if reactor.running:
            reactor.stop()

        self.passed = True

        self.log_last_step("audiofile1 size is %d, a negative size indicates the file was not present." % (self.audiofile1size, ))
        if self.audiofile1size < self.expectedfilesize:
            # if this failed mixmonitor is not creating the correct file size for the time we expect.
            self.log_last_step("audiofile1 size is not within the size tolerance.")
            self.passed = False

        if self.passed == True:
            self.log_last_step("Test Passed... All audio files are the correct.")

    def launch_test1(self):
        self.log_last_step("Placing call to test1 exten")
        self.asterisk.cli_exec("console dial test1@mixmonitortest")

    def start_asterisk(self):
        self.log_last_step("Starting Asterisk")
        self.asterisk.start()

        self.asterisk.cli_exec("core set verbose 10")

        if self.ast_version < AsteriskVersion("1.6.1"):
            self.asterisk.cli_exec("core set global TESTAUDIO1 " + self.audiofile1)
            self.asterisk.cli_exec("core set global TALK_AUDIO " + self.talkingaudio)
        else:
            self.asterisk.cli_exec("dialplan set global TESTAUDIO1 " + self.audiofile1)
            self.asterisk.cli_exec("dialplan set global TALK_AUDIO " + self.talkingaudio)

    def stop_asterisk(self):
        self.asterisk.stop()

    def log_last_step(self, step):
        print step
        self.last_step = step

    def run(self):
        self.start_asterisk()

        # call test1 extension now
        self.launch_test1()

        # read test results in 20 seconds
        reactor.callLater(20, self.read_result)

def main(argv=None):
    if argv is None:
        argv = sys.argv
    test = MixMonitorTest(argv)
    reactor.run()
    test.stop_asterisk()
    if test.passed:
        return 0
    return 1

if __name__ == "__main__":
    sys.exit(main() or 0)

