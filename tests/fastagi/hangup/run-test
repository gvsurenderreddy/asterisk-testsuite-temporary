#!/usr/bin/env python
'''
Copyright (C) 2010, Digium, Inc.
Erin Spiceland <espiceland@digium.com>

This program is free software, distributed under the terms of
the GNU General Public License Version 2.
'''

import sys
import os
import time
from twisted.internet import reactor
from starpy import fastagi

sys.path.append("lib/python")
from asterisk.asterisk import Asterisk

workingdir = "fastagi/channel-status"
testdir = "tests/fastagi"

class FastAGIHangupTest:
    def __init__(self):
        self.passed = False
        self.timeout = 30
        self.test = 1

        # Listen for results from dialplan
        self.agi_factory = fastagi.FastAGIFactory(self.do_test)
        reactor.listenTCP(4573, self.agi_factory, self.timeout, '127.0.0.1')
        reactor.callWhenRunning(self.run)

        self.ast1 = Asterisk(base=workingdir)
        self.ast1.install_configs("%s/configs/ast1" % (testdir))

    def on_hangup_failure(self, reason):
        print 'Could not hangup:', reason.getTraceback()

    def on_failure(self, reason):
        print "Channel is not active. Hangup succeeded."
        self.passed = True
        self.result_changed()

    def on_hangup(self, status):
        self.test = 2
        self.do_test(self.agi)

    def finish_test(self, status):
        print "Channel is still up! Status is", status, "Maybe the channel is still attempting to hangup..."
        print "Testing for closed channel again."
        time.sleep(5)
        self.agi.channelStatus(agi.variables['agi_channel']
            ).addCallback(self.finish_test2).addErrback(self.on_failure)

    def finish_test2(self, status):
        print "Channel is still up! Status is", status
        self.passed = False
        self.result_changed()

    # This gets invoked by the dialplan when the call is answered
    # Hangup via fastagi and test channel status
    def do_test(self, agi):
        self.agi = agi
        if self.test == 1:
            print "Connection established."
            return agi.hangup().addCallback(self.on_hangup).addErrback(
                self.on_hangup_failure)
        elif self.test == 2:
            print "Testing for closed channel."
            # We expect this call to fail, as channelStatus()
            # cannot query a dead channel
            return agi.channelStatus(agi.variables['agi_channel']
                ).addCallback(self.finish_test).addErrback(self.on_failure)

    def read_result(self):
        self.agi.finish()
        self.stop_reactor()
        if self.passed is True:
            print "Success"
        else:
            print "Failed"

    def stop_reactor(self):
        def __finish_stop(result):
            print "Stopping Reactor ..."
            if reactor.running:
                reactor.stop()
            return result
        def __stop_error(reason):
            logger.warning(reason)

        df = self.ast1.stop()
        df.addCallback(__finish_stop)
        df.addErrback(__stop_error)

    def launch_test(self):
        print "Originating call to begin test."
        self.ast1.cli_originate("Local/503@agitest extension echo@agitest")

    # Read result before timeout
    def result_changed(self):
        if self.passed is True:
            self.read_result()

    def run(self):
        def __finish_start_ops(result):
            self.launch_test()
            reactor.callLater(self.timeout, self.stop_reactor)
            return result

        print "Starting Asterisk"
        df = self.ast1.start()
        df.addCallback(__finish_start_ops)

def main():
    test = FastAGIHangupTest()
    reactor.run()
    if test.passed is not True:
        return 1

    return 0

if __name__ == "__main__":
    sys.exit(main() or 0)
