#!/usr/bin/env python
'''
Copyright (C) 2010, Digium, Inc.
Erin Spiceland <espiceland@digium.com>

This program is free software, distributed under the terms of
the GNU General Public License Version 2.
'''

import sys
import os
from optparse import OptionParser
from twisted.internet import reactor
from starpy import fastagi

sys.path.append("lib/python")
from asterisk.asterisk import Asterisk
from asterisk.version import AsteriskVersion

workingdir = "/tmp/asterisk-testsuite/fastagi/connect"
testdir = "tests/fastagi"

class FastAGIConnectTest:
    def __init__(self, argv):
        self.passed = False
        self.timeout = 45

        parser = OptionParser()
        parser.add_option("-v", "--version", dest="ast_version",
                          help="Asterisk version string")
        (options, args) = parser.parse_args(argv)
        self.ast_version = AsteriskVersion(options.ast_version)

        # Listen for results from dialplan
        self.agi_factory = fastagi.FastAGIFactory(self.do_test)
        reactor.listenTCP(4573, self.agi_factory, self.timeout, '127.0.0.1')
        reactor.callWhenRunning(self.run)

        self.ast1 = Asterisk(base=workingdir)
        self.ast1.install_configs("%s/configs/ast1" % (testdir))

    # This gets invoked by the dialplan when the call is answered
    # Disconnect agi and set test result values
    def do_test(self, agi):
        print "Connection established."
        self.passed = True
        self.result_changed()
        return agi.finish()

	# Read test results and dialplan globals
    def read_result(self):

        if self.passed is True:
            print "PASS - FastAGI connection works as expected."
        else:
            self.ast1.cli_exec("core show channels")

            if self.ast_version < AsteriskVersion("1.6.1"):
                self.ast1.cli_exec("core show globals")
            else:
                self.ast1.cli_exec("dialplan show globals")

            print "FAIL - FastAGI Connection test failed. View result of\
                    'core show globals' in log for more detailed failure\
                    results."

        self.stop_asterisk()

        if reactor.running:
            print "Stopping Reactor ..."
            reactor.stop()

    def launch_test(self):
        print "Originating call to begin test."
        self.ast1.cli_originate(
            "Local/501@agitest extension echo@agitest"
        )

    def start_asterisk(self):
        print "Starting Asterisk"
        self.ast1.start()

    def stop_asterisk(self):
        print "Stopping Asterisk"
        self.ast1.stop()

    # Read result before timeout 
    def result_changed(self):
        if self.passed is True:
            reactor.callLater(2, self.read_result)

    def run(self):
        self.start_asterisk()
        reactor.callLater(2, self.launch_test)
        reactor.callLater(self.timeout, self.read_result)

def main(argv=None):
    if argv is None:
        argv = sys.argv

    agi_test = FastAGIConnectTest(argv)
    reactor.run()
    if agi_test.passed is not True:
        return 1

    return 0

if __name__ == "__main__":
    sys.exit(main() or 0)
