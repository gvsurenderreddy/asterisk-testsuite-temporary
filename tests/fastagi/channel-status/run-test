#!/usr/bin/env python
'''
Copyright (C) 2010, Digium, Inc.
Erin Spiceland <espiceland@digium.com>

This program is free software, distributed under the terms of
the GNU General Public License Version 2.
'''

import sys
import os
from optparse import OptionParser
from twisted.internet import reactor
from starpy import fastagi

sys.path.append("lib/python")
from asterisk.asterisk import Asterisk
from asterisk.version import AsteriskVersion

class FastAGIChannelStatusTest:
    def __init__(self, argv):
        self.passed = {'4': False, '6':False}
        self.timeout = 45
        self.test = 4

        parser = OptionParser()
        parser.add_option("-v", "--version", dest="ast_version",
                          help="Asterisk version string")
        (options, args) = parser.parse_args(argv)
        self.ast_version = AsteriskVersion(options.ast_version)

        # Listen for results from dialplan
        self.agi_factory = fastagi.FastAGIFactory(self.do_test)
        reactor.listenTCP(4573, self.agi_factory, self.timeout, '127.0.0.1')
        reactor.callWhenRunning(self.run)

        print self.ast_version
        self.asterisk = Asterisk(base="/tmp/asterisk-testsuite/fastagi/channel-status")
        self.asterisk.install_configs("tests/fastagi/configs")

    def on_answer_failure(self, reason):
        print 'Could not answer the call:', reason.getTraceback()

    def on_failure(self, reason):
        print 'Could not run deferred for', self.test
        print reason.getTraceback()

    def on_answer(self, status):
        self.do_test(self.agi)

    def get_deferred(self, agi):
        return agi.channelStatus(agi.variables['agi_channel'])

    def finish_test(self, status):
        print "status is", status
        self.passed[status] = (self.test == status)
        if self.test == 4:
            print "Answering call"
            self.test = 6
            self.agi.answer().addCallback(self.on_answer).addErrback(
                self.on_answer_failure
            )
        elif self.test == 6:
            self.result_changed()

    # This gets invoked by the dialplan when the call is answered
    # Disconnect agi and set test result values
    def do_test(self, agi):
        self.agi = agi
        if self.test == 4:
            print "Connection established. Testing for channel status code 4."
        elif self.test == 6:
            print "Testing for channel status code 6."

        return self.get_deferred(agi).addCallback(
            self.finish_test
        ).addErrback(
            self.on_failure
        )

	# Read test results and dialplan globals
    def read_result(self):
        self.agi.finish()
        if self.passed[4] is True and self.passed[6] is True:
            print "PASS - FastAGI CHANNEL STATUS works as expected."
        else:
            self.asterisk.cli_exec("core show channels")

            if self.ast_version < AsteriskVersion("1.6.1"):
                self.asterisk.cli_exec("core show globals")
            else:
                self.asterisk.cli_exec("dialplan show globals")

            print "FAIL - View result of 'core show globals' in log for",\
                "more detailed failure results."
            if self.passed[4] is not True: print "Test 4 failed (ringing)."
            if self.passed[6] is not True: print "Test 6 failed (up)."

        self.stop_asterisk()

        if reactor.running:
            print "Stopping Reactor ..."
            reactor.stop()

    def launch_test(self):
        self.asterisk.cli_exec("agi set debug on")

        # Set blocking=False so that we can test channel
        # status before call is answered.
        print "Originating call to begin test."
        self.asterisk.cli_originate(
            "Local/no_answer@agitest extension echo@agitest", blocking=False
        )


    def start_asterisk(self):
        print "Starting Asterisk"
        self.asterisk.start()

    def stop_asterisk(self):
        print "Stopping Asterisk"
        self.asterisk.stop()

    # Read result before timeout 
    def result_changed(self):
        if self.passed[6] is not None:
            reactor.callLater(2, self.read_result)

    def run(self):
        self.start_asterisk()
        reactor.callLater(2, self.launch_test)
        reactor.callLater(self.timeout, self.read_result)

def main(argv=None):
    if argv is None:
        argv = sys.argv

    agi_test = FastAGIChannelStatusTest(argv)
    reactor.run()
    if agi_test.passed[4] is not True or agi_test.passed[6] is not True:
        return 1

    return 0

if __name__ == "__main__":
    sys.exit(main() or 0)
