#!/usr/bin/env python
'''
Copyright (C) 2010, Digium, Inc.
Matthias Nick <mnick86@gmail.com>

This program is free software, distributed under the terms of
the GNU General Public License Version 2.
'''

import sys
from twisted.internet import reactor

sys.path.append("lib/python")
from asterisk.asterisk import Asterisk
from asterisk.TestCase import TestCase


class CallParkingTest(TestCase):
    def __init__(self):
        TestCase.__init__(self)
        self.ast1_event = False
        self.ast2_event = False

        self.create_asterisk(2)

    def check_result(self):
        if self.ast1_event is True and self.ast2_event is True:
            self.stop_reactor()
            self.passed = True

    def get_parkedcall(self):
        self.ast[1].cli_originate("IAX2/ast1/701 extension s@ast1")

    def ast1_unparkedcall(self, ami, event):
        if event.get("exten").lower() != "701":
            return

    def ast1_parkedcall(self, ami, event):
        if event.get("exten").lower() != "701":
            return
        self.get_parkedcall()

    def ast2_userevent(self, ami, event):
        status = event.get("status")
        if status != "SUCCESS":
            self.stop_reactor()
            return

        self.ast2_event = True
        self.check_result()

    def ast1_userevent(self, ami, event):
        status = event.get("status")
        if status != "SUCCESS":
            self.stop_reactor()
            return

        self.ast1_event = True
        self.check_result()

    def ami_connect(self, ami):
        TestCase.ami_connect(self, ami)

        if ami.id == 0:
            self.ami[ami.id].registerEvent("ParkedCall", self.ast1_parkedcall)
            self.ami[ami.id].registerEvent("UnParkedCall", self.ast1_unparkedcall)
            self.ami[ami.id].registerEvent("UserEvent", self.ast1_userevent)
            self.ast[ami.id].cli_originate("Local/9876@ast2/n extension 101@ast2")
        elif ami.id == 1:
            self.ami[ami.id].registerEvent("UserEvent", self.ast2_userevent)

    def run(self):
        TestCase.run(self)
        self.create_ami_factory(2)


def main():
    # Run CallParking Test
    test = CallParkingTest()
    test.start_asterisk()
    reactor.run()
    test.stop_asterisk()
    if test.passed != True:
        return 1
    return 0

if __name__ == "__main__":
    sys.exit(main() or 0)

# vim:sw=4:ts=4:expandtab:textwidth=79
