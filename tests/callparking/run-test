#!/usr/bin/env python
'''
Copyright (C) 2010, Digium, Inc.
Matthias Nick <mnick86@gmail.com>

This program is free software, distributed under the terms of
the GNU General Public License Version 2.
'''

import sys
import os
import math
from optparse import OptionParser
from twisted.application import service, internet
from twisted.internet import reactor
from starpy import manager

sys.path.append("lib/python")
from asterisk.asterisk import Asterisk
from asterisk.version import AsteriskVersion

workingdir = "/tmp/asterisk-testsuite/callparking"
testdir = "tests/callparking"


class CallParkingTest:
    def __init__(self, argv):
        self.passed = False
        self.ast1_event = False
        self.ast2_event = False

        # Test timeout in seconds
        self.timeout = 30
        self.last_step = ""

        # get version info
        parser = OptionParser()
        parser.add_option("-v", "--version", dest="ast_version",
         help="Asterisk version string")
        (options, args) = parser.parse_args(argv)
        self.ast_version = AsteriskVersion(options.ast_version)

        reactor.callWhenRunning(self.run)

        self.ast1 = Asterisk(base=workingdir)
        self.ast1.install_configs("%s/configs/ast1" % (testdir))

        self.ast2 = Asterisk(base=workingdir)
        self.ast2.install_configs("%s/configs/ast2" % (testdir))

    def stop_reactor(self):
        print "Stopping Reactor ..."
        if reactor.running:
            reactor.stop()

    def check_result(self):
        self.log_last_step("Checking results...")
        if self.ast1_event is True and self.ast2_event is True:
            self.stop_reactor()
            self.passed = True

    def get_parkedcall(self):
        self.ast2.cli_originate("IAX2/ast1/701 extension s@ast1")

    def launch_test(self):
        self.ast1.cli_originate("Local/9876@ast2/n extension 101@ast2")

    def ast1_unparkedcall(self, ami, event):
        self.log_last_step("UnParkedCall event on ast1 ...")
        if event.get("exten").lower() != "701":
            return
        self.log_last_step("... Success")

    def ast1_parkedcall(self, ami, event):
        self.log_last_step("ParkedCall event on ast1 ...")
        if event.get("exten").lower() != "701":
            return
        self.log_last_step("... Success")
        self.get_parkedcall()

    def ast2_userevent(self, ami, event):
        self.log_last_step("UserEvent on ast2 ... ")
        status = event.get("status")
        print ("... %s" % (status))
        if status != "SUCCESS":
            self.stop_reactor()
            return

        self.ast2_event = True
        self.check_result()

    def ast1_userevent(self, ami, event):
        self.log_last_step("UserEvent on ast1 ... ")
        status = event.get("status")
        print ("... %s" % (status))
        if status != "SUCCESS":
            self.stop_reactor()
            return

        self.ast1_event = True
        self.check_result()

    def ami_on_connect2(self, ami):
        self.log_last_step("Connected to AMI 2")
        self.ami2 = ami
        self.ami2.registerEvent("UserEvent", self.ast2_userevent)

    def ami_on_connect1(self, ami):
        self.log_last_step("Connected to AMI 1")
        self.ami1 = ami
        self.ami1.registerEvent("ParkedCall", self.ast1_parkedcall)
        self.ami1.registerEvent("UnParkedCall", self.ast1_unparkedcall)
        self.ami1.registerEvent("UserEvent", self.ast1_userevent)

    def ami_login_error(self, ami):
        self.log_last_step("AMI login failed")
        self.stop_reactor()

    def ami_login(self):
        self.log_last_step("Logging in to the AMI")
        self.ami_factory1 = manager.AMIFactory("user", "mysecret")
        self.ami_factory2 = manager.AMIFactory("user", "mysecret")
        self.ami_factory1.login('127.0.0.1', 5038).addCallbacks(self.ami_on_connect1, self.ami_login_error)
        self.ami_factory2.login('127.0.0.2', 5038).addCallbacks(self.ami_on_connect2, self.ami_login_error)

    def start_asterisk(self):
        self.log_last_step("Starting Asterisk")
        self.ast1.start()
        self.ast2.start()

    def stop_asterisk(self):
        self.ast1.stop()
        self.ast2.stop()

    def log_last_step(self, step):
        print step
        self.last_step = step

    def run(self):
        self.ami_login()
        self.launch_test()

        # stop and read results after timeout
        reactor.callLater(self.timeout, self.stop_reactor)


def main(argv=None):
    if argv is None:
        argv = sys.argv

    # Run CallParking Test
    test = CallParkingTest(argv)
    test.start_asterisk()
    reactor.run()
    test.stop_asterisk()
    if test.passed != True:
        return 1
    return 0

if __name__ == "__main__":
    sys.exit(main() or 0)

# vim:sw=4:ts=4:expandtab:textwidth=79
