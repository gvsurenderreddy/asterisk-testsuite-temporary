#!/usr/bin/env python
'''
Copyright (C) 2012, Digium, Inc.
Jonathan Rose <jrose@digium.com>

This program is free software, distributed under the terms of
the GNU General Public License Version 2.
'''

import sys
import os
import logging
import re
import time
sys.path.append("lib/python")
from asterisk.asterisk import Asterisk
from asterisk.cdr import AsteriskCSVCDR, AsteriskCSVCDRLine
from asterisk.TestCase import TestCase
from asterisk.CDRTestCase import CDRTestCase
from twisted.internet import reactor

logger = logging.getLogger(__name__)

class ForkEndTimingTest(CDRTestCase):
    def __init__(self):
        CDRTestCase.__init__(self)

        self.add_expectation('cdrtest_local', AsteriskCSVCDRLine(
            destination = "1",
            lastapp = "ForkCDR",
            dcontext = "default",
            dchannel = "SIP/test-.*",
            channel = "Local/1@default-.*",
            disposition = "ANSWERED",
            amaflags = "DOCUMENTATION"))

        self.add_expectation('cdrtest_local', AsteriskCSVCDRLine(
            destination = "1",
            lastapp = "Hangup",
            dcontext = "default",
            dchannel = "SIP/test-.*",
            channel = "Local/1@default-.*",
            disposition = "NO ANSWER",
            amaflags = "DOCUMENTATION"))

    def match_cdrs(self):
        CDRTestCase.match_cdrs(self)
        if not self.passed:
            return

        cdr1 = AsteriskCSVCDR(fn = "%s/%s/cdr-csv/%s.csv" % (self.ast[0].base, self.ast[0].directories['astlogdir'], "cdrtest_local"))

        #check for missing fields
        for cdritem in cdr1:
            if cdritem.duration is None or cdritem.start is None or cdritem.end is None:
                logger.Error("EPIC FAILURE: CDR record %s is missing one or more key fields. This should never be able to happen." % cdritem)
                self.passed = False
                return

        # The dialplan is set up so that these two CDRs should each last at least 4 seconds. Giving it wiggle room,
        # we'll just say we want it to be greater than 1 second.
        if ((int(cdr1[0].duration) <= 1) or (int(cdr1[1].duration) <= 1)):
            logger.error("FAILURE: One or both CDRs only lasted a second or less (expected more)")
            self.passed = False
            return

        end = time.strptime(cdr1[0].end, "%Y-%m-%d %H:%M:%S")
        beg = time.strptime(cdr1[1].start, "%Y-%m-%d %H:%M:%S")

        #check that the end of the first CDR occured within a 1 second split of the beginning of the second CDR
        if (abs(time.mktime(end) - time.mktime(beg)) > 1):
            logger.error("Time discrepency between end1 and start2 must be one second or less.\n")
            logger.error("Actual times: end cdr1 = %s   begin cdr2 = %s" % (cdr1[0].end, cdr1[1].start))
            self.passed = False
            return

def main():
    test = ForkEndTimingTest()
    reactor.run()
    return test.results()

if __name__ == '__main__':
    sys.exit(main())
