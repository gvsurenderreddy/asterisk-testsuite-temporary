#!/usr/bin/env python
'''
Copyright (C) 2010, Digium, Inc.
Russell Bryant <russell@digium.com>

This program is free software, distributed under the terms of
the GNU General Public License Version 2.
'''

import sys
import os
import time
from twisted.application import service, internet
from twisted.internet import reactor, defer
from starpy import fastagi

sys.path.append("lib/python")
from asterisk.asterisk import Asterisk
from asterisk.cdr import AsteriskCSVCDR, AsteriskCSVCDRLine

workingdir = "iax2/basic-call"
testdir = "tests/%s" % workingdir


class IAXCallTest:
    def __init__(self):
        self.chan1_connected = False
        self.chan2_connected = False
        self.cdr_match = False
        self.f = fastagi.FastAGIFactory(self.fastagi_func)
        reactor.listenTCP(4573, self.f, 50, '127.0.0.1')
        reactor.callWhenRunning(self.run)

        print "Creating Asterisk instances ..."

        self.ast1 = Asterisk(base=workingdir)
        self.ast1.install_configs("%s/configs/ast1" % (testdir))

        self.ast2 = Asterisk(base=workingdir)
        self.ast2.install_configs("%s/configs/ast2" % (testdir))

    def fastagi_func(self, agi):
        sequence = fastagi.InSequence()
        def get_channel(c):
            print "Connection received for %s ..." % c
            if c.split("-")[0] == "IAX2/127.0.0.1:4569":
                self.chan1_connected = True
            elif c.split("-")[0] == "IAX2/127.0.0.1:4570":
                self.chan2_connected = True
        agi.getVariable("CHANNEL").addCallback(get_channel)
        sequence.append(agi.execute, "Wait", "5")
        sequence.append(agi.hangup)
        sequence.append(agi.finish)

    def stop_reactor(self):
        print "Stopping Reactor ..."
        if reactor.running:
            reactor.stop()

    def start_asterisk(self):
        print "Starting Asterisk instances ..."
        self.ast1.start()
        self.ast2.start()

    def stop_asterisk(self):
        print "Stopping Asterisk instances ..."
        self.ast1.stop()
        self.ast2.stop()
        cdr = AsteriskCSVCDR(fn="%s/var/log/asterisk/cdr-csv/Master.csv" %
                self.ast2.base)
        cdr_test = AsteriskCSVCDR(
                records=[AsteriskCSVCDRLine(disposition="ANSWERED", dchannel="",
                dcontext="iaxtest", amaflags="DOCUMENTATION", accountcode="",
                callerid="", userfield="", source="", destination="1000",
                lastapp="AGI", lastarg="GET")])
        if cdr_test.match(cdr):
            self.cdr_match = True

    def run(self):
        self.start_asterisk()

        reactor.callLater(20, self.stop_reactor)

        self.ast1.cli_originate(
                "IAX2/guest@127.0.0.1:4569/1000 extension 1000@iaxtest")


def main():
    test = IAXCallTest()
    reactor.run()
    test.stop_asterisk()
    if test.chan1_connected and test.chan2_connected and test.cdr_match:
        return 0
    return 1


if __name__ == "__main__":
    sys.exit(main() or 0)


# vim:sw=4:ts=4:expandtab:textwidth=79
