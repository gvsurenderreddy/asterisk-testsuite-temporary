#!/usr/bin/env python
'''
Copyright (C) 2010, Digium, Inc.
Russell Bryant <russell@digium.com>

This program is free software, distributed under the terms of
the GNU General Public License Version 2.
'''

import sys
import os
import time
import logging
from twisted.application import service, internet
from twisted.internet import reactor, defer
from starpy import fastagi

sys.path.append("lib/python")
from asterisk.asterisk import Asterisk
from asterisk.TestCase import TestCase
from asterisk.cdr import AsteriskCSVCDR, AsteriskCSVCDRLine

logger = logging.getLogger(__name__)

class IAXCallTest(TestCase):
    def __init__(self):
        super(IAXCallTest, self).__init__()
        self.channel1_events = { 'Created': False, 'Hangup': False }
        self.channel2_events = { 'Created': False, 'Hangup': False, 'CSV': False}
        self.create_asterisk(2)

    def ami_connect(self, ami):
        super(IAXCallTest, self).ami_connect(ami)

        ami.registerEvent('Hangup', self.hangup_event_handler)
        ami.registerEvent('Newchannel', self.new_channel_event_handler)

        if ami.id == 1:
            self.ast[0].cli_originate("IAX2/guest@127.0.0.1:4569/1000 extension 1000@iaxtest")

    def hangup_event_handler(self, ami, event):
        channel = event['channel']
        logger.info("Hangup for channel %s received" % channel)
        if channel.split("-")[0] == "IAX2/127.0.0.1:4569":
            self.channel1_events['Hangup'] = True
        elif channel.split("-")[0] == "IAX2/127.0.0.1:4570":
            self.channel2_events['Hangup'] = True
        if self.channel1_events['Hangup'] and self.channel2_events['Hangup']:
            self.stop_reactor()

    def new_channel_event_handler(self, ami, event):
        channel = event['channel']
        logger.info("New channel %s received" % channel)
        if channel.split("-")[0] == "IAX2/127.0.0.1:4569":
            self.channel1_events['Created'] = True
        elif channel.split("-")[0] == "IAX2/127.0.0.1:4570":
            self.channel2_events['Created'] = True

    def run(self):
        super(IAXCallTest, self).run()

        self.create_ami_factory(2)

    def check_cdrs(self):
        cdr = AsteriskCSVCDR(fn="%s/var/log/asterisk/cdr-csv/Master.csv" %
                self.ast[1].base)
        cdr_test = AsteriskCSVCDR(
                records=[AsteriskCSVCDRLine(disposition="ANSWERED", dchannel="",
                dcontext="iaxtest", amaflags="DOCUMENTATION", accountcode="",
                callerid="", userfield="", source="", destination="1000",
                lastapp="Wait", lastarg="1")])
        if cdr_test.match(cdr):
            self.channel2_events['CSV'] = True

    def check_results(self):
        self.passed = True
        for k, v in self.channel1_events.items():
            if not v:
                logger.warn("Failed to receive exepcted event %s for channel 1" % k)
                self.passed = False
        for k, v in self.channel2_events.items():
            if not v:
                logger.warn("Failed to receive expected event %s for channel 2" % k)
                self.passed = False

def main():
    test = IAXCallTest()
    reactor.run()
    test.check_cdrs()
    test.check_results()

    if not test.passed:
        return 1
    return 0


if __name__ == "__main__":
    sys.exit(main() or 0)


# vim:sw=4:ts=4:expandtab:textwidth=79
