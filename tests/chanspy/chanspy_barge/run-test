#!/usr/bin/env python
'''
Copyright (C) 2010, Digium, Inc.
David Vossel <dvossel@digium.com>

This program is free software, distributed under the terms of
the GNU General Public License Version 2.
'''

import sys
import os
import signal
import subprocess
from optparse import OptionParser
from twisted.application import service, internet
from twisted.internet import reactor, defer
from starpy import manager
from starpy import fastagi

sys.path.append("lib/python")
from asterisk.asterisk import Asterisk
from asterisk.version import AsteriskVersion

workingdir = "chanspy/chanspy_barge"
testdir = "tests/%s" % workingdir

class ChanSpyBarge:
    def __init__(self, argv):
        self.last_step = ""
        self.passed = False
        self.numSpyEvents = 0
        self.expectedSpyEvents = 3
        self.talkDetected = 0
        self.test_to = 25

        # get version info
        parser = OptionParser()
        parser.add_option("-v", "--version", dest="ast_version",
                          help="Asterisk version string")
        parser.add_option("-n", dest="test_name",
                help="Test name")

        (options, args) = parser.parse_args(argv)
        self.ast_version = AsteriskVersion(options.ast_version)

        reactor.callWhenRunning(self.run)
        self.agi = fastagi.FastAGIFactory(self.reportPassed)
        reactor.listenTCP(4573, self.agi, self.test_to, '127.0.0.1')

        print self.ast_version

        ast_conf_options = {
            "transmit_silence" : "yes",
        }

        self.ast1 = Asterisk(base=workingdir, ast_conf_options=ast_conf_options)
        self.ast1.install_configs("%s/configs/ast1" % (testdir))
        self.talkingaudio = os.path.join(os.getcwd(), "%s/sounds/talking" % (testdir))
        self.audiofile1 = os.path.join(os.getcwd(), "%s/testaudio1" % (testdir))

    def reportPassed(self, agi):
        print "GOT PASS RESULTS!!!\n"
        sequence = fastagi.InSequence()
        sequence.append(agi.execute, "HangUp")
        sequence.append(agi.finish)
        self.passed = True
        reactor.callLater(1, self.readResult)
        return sequence()

    def readResult(self):
        self.stop_reactor()
        self.logLastStep("Reading results")
        self.ast1.cli_exec("core show locks")   # get lock output in case of deadlock before tearing down.
        self.ast1.cli_exec("core show channels")# if channels are still up for some reason, we want to know that as well

        if self.ast_version < AsteriskVersion("1.6.1"):
            self.ast1.cli_exec("core show globals") # The global variables here hold failure conditions
        else:
            self.ast1.cli_exec("dialplan show globals") # The global variables here hold failure conditions

        if self.passed == True:
            print 'SIP ChanSpy test PASSED!'
        else:
            print 'SIP ChanSpy Test FAILED'

    def stop_reactor(self):
        print "Stopping Reactor ..."
        if reactor.running:
            reactor.stop()

    def chanspyEvent(self, ami, event):
        self.numSpyEvents += 1
        if event['spyeechannel'].count('end_a') > 0:
            reactor.callLater(3, self.aHangup)
            reactor.callLater(4, self.bHangup)
        print event

    def amiOnConnect(self, ami):
        self.logLastStep("Connected to the AMI")
        self.ami = ami
        self.ami.registerEvent('ChanSpyStart', self.chanspyEvent)

    def amiLoginError(self, ami):
        self.logLastStep("AMI login failed")
        reactor.callLater(1, self.readResult)

    def amiLogin(self):
        self.logLastStep("Logging in to the AMI")
        self.ami_factory = manager.AMIFactory("user", "mysecret")
        self.ami_factory.login('127.0.0.1', 5038).addCallbacks(self.amiOnConnect, self.amiLoginError)

    def aCall(self):
        self.logLastStep("A Calling into Wait")
        self.pja.stdin.write("m\n")
        self.pja.stdin.write("sip:play_exten@127.0.0.1:5060\n")

    def bCall(self):
        self.logLastStep("B Calling into Playback")
        self.pjb.stdin.write("m\n")
        self.pjb.stdin.write("sip:play_exten@127.0.0.1:5060\n")

    def aHangup(self):
        self.pja.stdin.write("h\n")

    def bHangup(self): #calls into chanspy extension and plays audio to A using Barge
        self.pjb.stdin.write("h\n")
        reactor.callLater(2, self.verifyAudio)

    def startProcesses(self):
        self.logLastStep("Starting Processes")
        self.ast1.start()
        playfilearg = "--play-file=%s.wav" % (self.talkingaudio)
        self.pja = subprocess.Popen(['pjsua', '--local-port=5065', '--auto-answer=200', '--null-audio', '--auto-loop'], stdin=subprocess.PIPE, stdout=subprocess.PIPE)
        self.pjb = subprocess.Popen(['pjsua', '--local-port=5066', '--auto-answer=200', playfilearg, '--null-audio', '--auto-play'], stdin=subprocess.PIPE, stdout=subprocess.PIPE)

        if self.ast_version < AsteriskVersion("1.6.1"):
            self.ast1.cli_exec("core set global TESTAUDIO1 " + self.audiofile1)
            self.ast1.cli_exec("core set global TALK_AUDIO " + self.talkingaudio)
        else:
            self.ast1.cli_exec("dialplan set global TESTAUDIO1 " + self.audiofile1)
            self.ast1.cli_exec("dialplan set global TALK_AUDIO " + self.talkingaudio)

    def stopProcesses(self):
        self.logLastStep("Stopping Processes")
        self.ast1.stop()
        os.kill(self.pja.pid, signal.SIGKILL)
        os.kill(self.pjb.pid, signal.SIGKILL)

    def logLastStep(self, step):
        print step
        self.lastStep = step

    def callChanSpy(self):
        self.logLastStep("Placing call to ChanSpy extension.")
        if self.ast_version < AsteriskVersion("1.6.2"):
            self.ast1.cli_exec("originate SIP/end_b extension chanspytest@test")
        else:
            self.ast1.cli_exec("channel originate SIP/end_b extension chanspytest@test")

    def verifyAudio(self):
        if self.ast_version < AsteriskVersion("1.6.2"):
            self.ast1.cli_exec("originate Local/play_recording@test extension detect_audio@test")
        else:
            self.ast1.cli_exec("channel originate Local/play_recording@test extension detect_audio@test")

    def run(self):
        # call extensions
        self.amiLogin()
        reactor.callLater(1, self.callChanSpy)
        reactor.callLater(2, self.aCall)

        # stop and read results after timeout
        reactor.callLater(self.test_to, self.readResult)

def main(argv=None):
    if argv is None:
        argv = sys.argv

    # Run Test
    test = ChanSpyBarge(argv)
    test.startProcesses()
    reactor.run()
    test.stopProcesses()
    if test.passed != True:
        return 1
    return 0

if __name__ == "__main__":
    sys.exit(main() or 0)


# vim:sw=4:ts=4:expandtab:textwidth=79
