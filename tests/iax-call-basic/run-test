#!/usr/bin/env python
'''
Copyright (C) 2010, Digium, Inc.
Russell Bryant <russell@digium.com>

This program is free software, distributed under the terms of
the GNU General Public License Version 2.
'''

import sys
import os
import time
from optparse import OptionParser
from twisted.application import service, internet
from twisted.internet import reactor, defer
from starpy import fastagi

sys.path.append("lib/python")
from asterisk.asterisk import Asterisk
from asterisk.version import AsteriskVersion


class IAXCallTest:
    def __init__(self, argv):
        self.chan1_connected = False
        self.chan2_connected = False
        self.f = fastagi.FastAGIFactory(self.fastagi_func)
        reactor.listenTCP(4573, self.f, 50, '127.0.0.1')
        reactor.callWhenRunning(self.run)
        reactor.callLater(20, self.stop_reactor)

        parser = OptionParser()
        parser.add_option("-v", "--version", dest="ast_version",
                          help="Asterisk version string")
        (options, args) = parser.parse_args(argv)
        self.ast_version = AsteriskVersion(options.ast_version)

        print "Creating Asterisk instances ..."

        self.asterisk = Asterisk(base=os.path.join(os.getcwd(),
                                      "tests/iax-call-basic/tmp/"))
        self.asterisk.install_config("tests/iax-call-basic/configs/manager.conf")
        self.asterisk.install_config("tests/iax-call-basic/configs/logger.conf")
        self.asterisk.install_config("tests/iax-call-basic/configs/extensions.conf")
        self.asterisk.install_config("tests/iax-call-basic/configs/iax.conf")

        self.asterisk2 = Asterisk(base=os.path.join(os.getcwd(),
                                      "tests/iax-call-basic/tmp/"))
        self.asterisk2.install_config("tests/iax-call-basic/configs2/manager.conf")
        self.asterisk2.install_config("tests/iax-call-basic/configs2/logger.conf")
        self.asterisk2.install_config("tests/iax-call-basic/configs2/extensions.conf")
        self.asterisk2.install_config("tests/iax-call-basic/configs2/iax.conf")

    def fastagi_func(self, agi):
        sequence = fastagi.InSequence()
        def get_channel(c):
            print "Connection received for {0} ...".format(c)
            if c.split("-")[0] == "IAX2/127.0.0.1:4569":
                self.chan1_connected = True
            elif c.split("-")[0] == "IAX2/127.0.0.1:4570":
                self.chan2_connected = True
        agi.getVariable("CHANNEL").addCallback(get_channel)
        sequence.append(agi.execute, "Wait", "5")
        sequence.append(agi.hangup)
        sequence.append(agi.finish)

    def stop_reactor(self):
        print "Stopping Reactor ..."
        if reactor.running:
            reactor.stop()

    def start_asterisk(self):
        print "Starting Asterisk instances ..."
        self.asterisk.start()
        self.asterisk2.start()

    def stop_asterisk(self):
        print "Stopping Asterisk instances ..."
        self.asterisk.stop()
        self.asterisk2.stop()

    def run(self):
        self.start_asterisk()

        self.asterisk.cli_exec("core set verbose 10")
        self.asterisk2.cli_exec("core set verbose 10")

        if self.ast_version < AsteriskVersion("1.6.0"):
            self.asterisk.cli_exec("iax2 set debug")
            self.asterisk2.cli_exec("iax2 set debug")
        else:
            self.asterisk.cli_exec("iax2 set debug on")
            self.asterisk2.cli_exec("iax2 set debug on")

        self.asterisk.cli_exec(
                "originate IAX2/guest@127.0.0.1:4569/1000 extension 1000@iaxtest")


def main(argv=None):
    if argv is None:
        argv = sys.argv
    test = IAXCallTest(argv)
    reactor.run()
    test.stop_asterisk()
    if test.chan1_connected and test.chan2_connected:
        return 0
    return 1


if __name__ == "__main__":
    sys.exit(main() or 0)


# vim:sw=4:ts=4:expandtab:textwidth=79
