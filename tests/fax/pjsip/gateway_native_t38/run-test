#!/usr/bin/env python
# vim: sw=3 et:
'''
Copyright (C) 2011, Digium, Inc.
Matthew Nicholson <mnicholson@digium.com>

This program is free software, distributed under the terms of
the GNU General Public License Version 2.
'''

import sys
import logging
import os
import re
import shutil

from twisted.internet import reactor

sys.path.append("lib/python")
from asterisk.asterisk import Asterisk
from asterisk.TestCase import TestCase

logger = logging.getLogger(__name__)

class GatewayTest(TestCase):
   event_count = 0
   success_count = 0

   def __init__(self):
      TestCase.__init__(self)
      self.reactor_timeout = 120
      self.create_asterisk(2)

      # copy the tiff file we are going to send to a good known location
      shutil.copy("%s/send.tiff" % (os.path.dirname(os.path.realpath(__file__)),), "%s%s" % (self.ast[0].base, self.ast[0].directories['astdatadir']))

   def ami_connect(self, ami):
      if ami.id == 0:

         logger.info("Sending a call from Asterisk 1 to Asterisk 2")

         ami.registerEvent('UserEvent', self.fax_result)
         df = ami.originate("PJSIP/ast2-t38/sip:1234@127.0.0.2", "sendfax", "1234", 1)

         def handle_failure(reason):
            logger.error("Error sending originate")
            logger.error(reason.getTraceback())
            self.stop_reactor()

            return reason

         df.addErrback(handle_failure)
      else:
         ami.registerEvent('UserEvent', self.fax_gateway_result)

   def fax_gateway_result(self, ami, event):
      if event['userevent'] != 'FaxStatus':
         return

      self.event_count += 1

      if event['status'] == "SUCCESS" and event['error'] == "NATIVE_T38":
         logger.info("Successful gateway operation")
         self.success_count += 1
      else:
         logger.info("gateway result should have been SUCCESS with error NATIVE_T38")
         logger.info("status: %s" % (event['status'],))
         logger.info("error: %s" % (event['error'],))
         logger.info("statusstr: %s" % (event['statusstr'],))

      self.are_we_there_yet()

   def fax_result(self, ami, event):
      if event['userevent'] != 'FaxStatus':
         return

      self.event_count += 1

      if event['status'] == "SUCCESS":
         logger.info("successful %s through gateway" % (event['operation'],))
         self.success_count += 1
      else:
         logger.error("error sending fax through gateway:")
         logger.error("operation: %s" % (event['operation'],))
         logger.error("status: %s" % (event['status'],))
         logger.error("error: %s" % (event['error'],))
         logger.error("statusstr: %s" % (event['statusstr'],))

      self.are_we_there_yet()

   def are_we_there_yet(self):
      if self.event_count == 3:
         if self.success_count == 3:
            self.passed = True
         self.stop_reactor()

   def run(self):
      TestCase.run(self)
      self.create_ami_factory(2)


def main():
   test = GatewayTest()
   reactor.run()

   if not test.passed:
      return 1

   return 0

if __name__ == "__main__":
   sys.exit(main() or 0)

